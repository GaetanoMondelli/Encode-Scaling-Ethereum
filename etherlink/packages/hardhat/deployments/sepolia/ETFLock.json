{
  "address": "0x8663e490E2d016889E23F5e29Aa54937C73dff13",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_mainChain",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_chainId",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "_address",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_quantity",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "_chainId",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "_contributor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_aggregator",
              "type": "address"
            }
          ],
          "internalType": "struct TokenQuantity[]",
          "name": "_requiredTokens",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "_etfToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_etfTokenPerVault",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_chainId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_contributor",
          "type": "address"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "accountContributionsPerVault",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_chainId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_contributor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_aggregator",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chainId",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "vaultId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "_address",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "_quantity",
                  "type": "uint256"
                },
                {
                  "internalType": "uint32",
                  "name": "_chainId",
                  "type": "uint32"
                },
                {
                  "internalType": "address",
                  "name": "_contributor",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "_aggregator",
                  "type": "address"
                }
              ],
              "internalType": "struct TokenQuantity[]",
              "name": "tokens",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct DepositInfo",
          "name": "_depositInfo",
          "type": "tuple"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "etfToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "etfTokenPerVault",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequiredTokens",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "_address",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_quantity",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "_chainId",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "_contributor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_aggregator",
              "type": "address"
            }
          ],
          "internalType": "struct TokenQuantity[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultId",
          "type": "uint256"
        }
      ],
      "name": "getVault",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "_address",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "_quantity",
                  "type": "uint256"
                },
                {
                  "internalType": "uint32",
                  "name": "_chainId",
                  "type": "uint32"
                },
                {
                  "internalType": "address",
                  "name": "_contributor",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "_aggregator",
                  "type": "address"
                }
              ],
              "internalType": "struct TokenQuantity[]",
              "name": "_tokens",
              "type": "tuple[]"
            },
            {
              "internalType": "enum VaultState",
              "name": "state",
              "type": "uint8"
            }
          ],
          "internalType": "struct Vault",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVaultStates",
      "outputs": [
        {
          "internalType": "enum VaultState[]",
          "name": "",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_origin",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_sender",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "handle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isMainChain",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mainChainId",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mainChainLock",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requiredTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_chainId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_contributor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_aggregator",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mainChainLock",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_outbox",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_securityModule",
          "type": "address"
        }
      ],
      "name": "setSideChainParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultId",
          "type": "uint256"
        },
        {
          "internalType": "enum VaultState",
          "name": "_state",
          "type": "uint8"
        }
      ],
      "name": "setVaultState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sideChainLock",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vaults",
      "outputs": [
        {
          "internalType": "enum VaultState",
          "name": "state",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb45b22f5ca4aaffd00bf1144f0d5f28b920abe312264ed2561442e4caf111153",
  "receipt": {
    "to": null,
    "from": "0x2a1F5eB3e84e58e6F1e565306298B9dE1273f203",
    "contractAddress": "0x8663e490E2d016889E23F5e29Aa54937C73dff13",
    "transactionIndex": 137,
    "gasUsed": "1928234",
    "logsBloom": "0x
    "blockHash": "0x35aaf52d933cfb21b4fb4e5140575f99dc0a943373f3bd1d552d460e3fbe09ca",
    "transactionHash": "0xb45b22f5ca4aaffd00bf1144f0d5f28b920abe312264ed2561442e4caf111153",
    "logs": [],
    "blockNumber": 5707091,
    "cumulativeGasUsed": "29979946",
    "status": 1,
    "byzantium": true
  },
  "args": [
    128123,
    11155111,
    [
      {
        "_address": "0xA0ac5c99C36128C1De7F88e4f0894D8859Bbc2B2",
        "_quantity": "100000000000000000000",
        "_chainId": 11155111,
        "_contributor": "0x2a1F5eB3e84e58e6F1e565306298B9dE1273f203",
        "_aggregator": "0x0000000000000000000000000000000000000000"
      }
    ],
    "0x0000000000000000000000000000000000000000",
    "100000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "443d90e3da72e01ac465b0c58ca428b3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_mainChain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_contributor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"}],\"internalType\":\"struct TokenQuantity[]\",\"name\":\"_requiredTokens\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_etfToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_etfTokenPerVault\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_contributor\",\"type\":\"address\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountContributionsPerVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_contributor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_contributor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"}],\"internalType\":\"struct TokenQuantity[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct DepositInfo\",\"name\":\"_depositInfo\",\"type\":\"tuple\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"etfToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"etfTokenPerVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequiredTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_contributor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"}],\"internalType\":\"struct TokenQuantity[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"getVault\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_contributor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"}],\"internalType\":\"struct TokenQuantity[]\",\"name\":\"_tokens\",\"type\":\"tuple[]\"},{\"internalType\":\"enum VaultState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"struct Vault\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultStates\",\"outputs\":[{\"internalType\":\"enum VaultState[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_origin\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_sender\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"handle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMainChain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainChainId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainChainLock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requiredTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_contributor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mainChainLock\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_outbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_securityModule\",\"type\":\"address\"}],\"name\":\"setSideChainParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"enum VaultState\",\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"setVaultState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sideChainLock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaults\",\"outputs\":[{\"internalType\":\"enum VaultState\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ETFLock.sol\":\"ETFLock\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@hyperlane-xyz/core/contracts/interfaces/IInterchainSecurityModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\ninterface IInterchainSecurityModule {\\n    enum Types {\\n        UNUSED,\\n        ROUTING,\\n        AGGREGATION,\\n        LEGACY_MULTISIG,\\n        MERKLE_ROOT_MULTISIG,\\n        MESSAGE_ID_MULTISIG,\\n        NULL, // used with relayer carrying no metadata\\n        CCIP_READ\\n    }\\n\\n    /**\\n     * @notice Returns an enum that represents the type of security model\\n     * encoded by this ISM.\\n     * @dev Relayers infer how to fetch and format metadata.\\n     */\\n    function moduleType() external view returns (uint8);\\n\\n    /**\\n     * @notice Defines a security model responsible for verifying interchain\\n     * messages based on the provided metadata.\\n     * @param _metadata Off-chain metadata provided by a relayer, specific to\\n     * the security model encoded by the module (e.g. validator signatures)\\n     * @param _message Hyperlane encoded interchain message\\n     * @return True if the message was verified\\n     */\\n    function verify(\\n        bytes calldata _metadata,\\n        bytes calldata _message\\n    ) external returns (bool);\\n}\\n\\ninterface ISpecifiesInterchainSecurityModule {\\n    function interchainSecurityModule()\\n        external\\n        view\\n        returns (IInterchainSecurityModule);\\n}\\n\",\"keccak256\":\"0xd144a00a15eef18012f8dae28ca1a7d965012f88ff4a07382a172ae6e02811ce\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/interfaces/IMailbox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.8.0;\\n\\nimport {IInterchainSecurityModule} from \\\"./IInterchainSecurityModule.sol\\\";\\nimport {IPostDispatchHook} from \\\"./hooks/IPostDispatchHook.sol\\\";\\n\\ninterface IMailbox {\\n    // ============ Events ============\\n    /**\\n     * @notice Emitted when a new message is dispatched via Hyperlane\\n     * @param sender The address that dispatched the message\\n     * @param destination The destination domain of the message\\n     * @param recipient The message recipient address on `destination`\\n     * @param message Raw bytes of message\\n     */\\n    event Dispatch(\\n        address indexed sender,\\n        uint32 indexed destination,\\n        bytes32 indexed recipient,\\n        bytes message\\n    );\\n\\n    /**\\n     * @notice Emitted when a new message is dispatched via Hyperlane\\n     * @param messageId The unique message identifier\\n     */\\n    event DispatchId(bytes32 indexed messageId);\\n\\n    /**\\n     * @notice Emitted when a Hyperlane message is processed\\n     * @param messageId The unique message identifier\\n     */\\n    event ProcessId(bytes32 indexed messageId);\\n\\n    /**\\n     * @notice Emitted when a Hyperlane message is delivered\\n     * @param origin The origin domain of the message\\n     * @param sender The message sender address on `origin`\\n     * @param recipient The address that handled the message\\n     */\\n    event Process(\\n        uint32 indexed origin,\\n        bytes32 indexed sender,\\n        address indexed recipient\\n    );\\n\\n    function localDomain() external view returns (uint32);\\n\\n    function delivered(bytes32 messageId) external view returns (bool);\\n\\n    function defaultIsm() external view returns (IInterchainSecurityModule);\\n\\n    function defaultHook() external view returns (IPostDispatchHook);\\n\\n    function requiredHook() external view returns (IPostDispatchHook);\\n\\n    function latestDispatchedId() external view returns (bytes32);\\n\\n    function dispatch(\\n        uint32 destinationDomain,\\n        bytes32 recipientAddress,\\n        bytes calldata messageBody\\n    ) external payable returns (bytes32 messageId);\\n\\n    function quoteDispatch(\\n        uint32 destinationDomain,\\n        bytes32 recipientAddress,\\n        bytes calldata messageBody\\n    ) external view returns (uint256 fee);\\n\\n    function dispatch(\\n        uint32 destinationDomain,\\n        bytes32 recipientAddress,\\n        bytes calldata body,\\n        bytes calldata defaultHookMetadata\\n    ) external payable returns (bytes32 messageId);\\n\\n    function quoteDispatch(\\n        uint32 destinationDomain,\\n        bytes32 recipientAddress,\\n        bytes calldata messageBody,\\n        bytes calldata defaultHookMetadata\\n    ) external view returns (uint256 fee);\\n\\n    function dispatch(\\n        uint32 destinationDomain,\\n        bytes32 recipientAddress,\\n        bytes calldata body,\\n        bytes calldata customHookMetadata,\\n        IPostDispatchHook customHook\\n    ) external payable returns (bytes32 messageId);\\n\\n    function quoteDispatch(\\n        uint32 destinationDomain,\\n        bytes32 recipientAddress,\\n        bytes calldata messageBody,\\n        bytes calldata customHookMetadata,\\n        IPostDispatchHook customHook\\n    ) external view returns (uint256 fee);\\n\\n    function process(\\n        bytes calldata metadata,\\n        bytes calldata message\\n    ) external payable;\\n\\n    function recipientIsm(\\n        address recipient\\n    ) external view returns (IInterchainSecurityModule module);\\n}\\n\",\"keccak256\":\"0x9cd728ba304279775818f8c7b4c02f8c5dd2b28e051ec466dbe36129be01a6ee\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/interfaces/hooks/IPostDispatchHook.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.8.0;\\n\\n/*@@@@@@@       @@@@@@@@@\\n @@@@@@@@@       @@@@@@@@@\\n  @@@@@@@@@       @@@@@@@@@\\n   @@@@@@@@@       @@@@@@@@@\\n    @@@@@@@@@@@@@@@@@@@@@@@@@\\n     @@@@@  HYPERLANE  @@@@@@@\\n    @@@@@@@@@@@@@@@@@@@@@@@@@\\n   @@@@@@@@@       @@@@@@@@@\\n  @@@@@@@@@       @@@@@@@@@\\n @@@@@@@@@       @@@@@@@@@\\n@@@@@@@@@       @@@@@@@@*/\\n\\ninterface IPostDispatchHook {\\n    enum Types {\\n        UNUSED,\\n        ROUTING,\\n        AGGREGATION,\\n        MERKLE_TREE,\\n        INTERCHAIN_GAS_PAYMASTER,\\n        FALLBACK_ROUTING,\\n        ID_AUTH_ISM,\\n        PAUSABLE,\\n        PROTOCOL_FEE,\\n        LAYER_ZERO_V1\\n    }\\n\\n    /**\\n     * @notice Returns an enum that represents the type of hook\\n     */\\n    function hookType() external view returns (uint8);\\n\\n    /**\\n     * @notice Returns whether the hook supports metadata\\n     * @param metadata metadata\\n     * @return Whether the hook supports metadata\\n     */\\n    function supportsMetadata(\\n        bytes calldata metadata\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Post action after a message is dispatched via the Mailbox\\n     * @param metadata The metadata required for the hook\\n     * @param message The message passed from the Mailbox.dispatch() call\\n     */\\n    function postDispatch(\\n        bytes calldata metadata,\\n        bytes calldata message\\n    ) external payable;\\n\\n    /**\\n     * @notice Compute the payment required by the postDispatch call\\n     * @param metadata The metadata required for the hook\\n     * @param message The message passed from the Mailbox.dispatch() call\\n     * @return Quoted payment for the postDispatch call\\n     */\\n    function quoteDispatch(\\n        bytes calldata metadata,\\n        bytes calldata message\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x29201c5597a02b691be7815554a9a2815198bb8b76b061c1f4f6daf77d5d1d75\",\"license\":\"MIT OR Apache-2.0\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/ETFLock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC721 } from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { ISimpleERC20 } from \\\"./SimpleERC20.sol\\\";\\nimport \\\"@hyperlane-xyz/core/contracts/interfaces/IMailbox.sol\\\";\\nimport { IInterchainSecurityModule } from \\\"@hyperlane-xyz/core/contracts/interfaces/IInterchainSecurityModule.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nstruct TokenQuantity {\\n\\taddress _address;\\n\\tuint256 _quantity;\\n\\tuint32 _chainId;\\n\\taddress _contributor;\\n\\taddress _aggregator;\\n}\\n\\nstruct Vault {\\n\\tTokenQuantity[] _tokens;\\n\\tVaultState state;\\n}\\n\\nenum VaultState {\\n\\tEMPTY,\\n\\tOPEN,\\n\\tMINTED,\\n\\tBURNED\\n}\\n\\nstruct EventInfo {\\n\\taddress sender;\\n\\tuint256 quantity;\\n\\tuint32 chainId;\\n\\taddress contributor;\\n}\\n\\nstruct DepositInfo {\\n\\tuint256 vaultId;\\n\\tTokenQuantity[] tokens;\\n}\\n\\ncontract ETFLock {\\n\\taddress public sideChainLock;\\n\\tTokenQuantity[] public requiredTokens;\\n\\tmapping(address => TokenQuantity) public addressToToken;\\n\\tuint32 public chainId;\\n\\tuint32 public mainChainId;\\n\\t\\n\\t// Siechain params\\n\\taddress public mainChainLock;\\n\\tIMailbox outbox;\\n\\tIInterchainSecurityModule securityModule;\\n\\n\\t// Mainchain params\\n\\taddress public etfToken;\\n\\tuint256 public etfTokenPerVault;\\n\\n\\tmapping(uint256 => address[]) contributorsByVault;\\n\\tmapping(uint256 => mapping(address => uint256))\\n\\t\\tpublic accountContributionsPerVault;\\n\\n\\tevent Deposit(\\n\\t\\tuint256 _vaultId,\\n\\t\\taddress _address,\\n\\t\\tuint256 _quantity,\\n\\t\\tuint32 _chainId,\\n\\t\\taddress _contributor\\n\\t);\\n\\n\\tmapping(uint256 => Vault) public vaults;\\n\\n\\tconstructor(\\n\\t\\tuint32 _mainChain,\\n\\t\\tuint32 _chainId,\\n\\t\\tTokenQuantity[] memory _requiredTokens,\\n\\t\\taddress _etfToken,\\n\\t\\tuint256 _etfTokenPerVault\\n\\t) {\\n\\t\\tmainChainId = _mainChain;\\n\\t\\tchainId = _chainId;\\n\\t\\tetfToken = _etfToken;\\n\\t\\tetfTokenPerVault = _etfTokenPerVault;\\n\\t\\tfor (uint256 i = 0; i < _requiredTokens.length; i++) {\\n\\t\\t\\trequiredTokens.push(_requiredTokens[i]);\\n\\t\\t\\taddressToToken[_requiredTokens[i]._address] = _requiredTokens[i];\\n\\t\\t}\\n\\t}\\n\\n\\tfunction setSideChainParams(address _mainChainLock,\\n\\t\\taddress _outbox, address _securityModule \\n\\t) public {\\n\\t\\trequire(!isMainChain(), \\\"Main chain lock address cannot be set on main chain\\\");\\n\\t\\tmainChainLock = _mainChainLock;\\n\\t\\toutbox = IMailbox(_outbox);\\n\\t\\tsecurityModule = IInterchainSecurityModule(_securityModule);\\n\\t}\\n\\n\\tfunction getVaultStates() public view returns (VaultState[] memory) {\\n\\t\\tVaultState[] memory states = new VaultState[](90);\\n\\t\\tfor (uint256 i = 0; i < states.length; i++) {\\n\\t\\t\\tstates[i] = vaults[i].state;\\n\\t\\t}\\n\\t\\treturn states;\\n\\t}\\n\\n\\tfunction getVault(uint256 _vaultId) public view returns (Vault memory) {\\n\\t\\treturn vaults[_vaultId];\\n\\t}\\n\\n\\tfunction getRequiredTokens() public view returns (TokenQuantity[] memory) {\\n\\t\\treturn requiredTokens;\\n\\t}\\n\\n\\tfunction setVaultState(uint256 _vaultId, VaultState _state) public {\\n\\t\\tvaults[_vaultId].state = _state;\\n\\t}\\n\\n\\tfunction isMainChain() public view returns (bool) {\\n\\t\\treturn chainId == mainChainId;\\n\\t}\\n\\n\\tfunction _deposit(\\n\\t\\tDepositInfo memory _depositInfo,\\n\\t\\tuint32 _chainId\\n\\t) internal {\\n\\t\\tuint256 _vaultId = _depositInfo.vaultId;\\n\\t\\tTokenQuantity[] memory _tokens = _depositInfo.tokens;\\n\\t\\trequire(\\n\\t\\t\\tvaults[_vaultId].state == VaultState.OPEN ||\\n\\t\\t\\t\\tvaults[_vaultId].state == VaultState.EMPTY,\\n\\t\\t\\t\\\"Vault is not open or empty\\\"\\n\\t\\t);\\n\\n\\t\\t// require(_chainId == chainId, \\\"ChainId does not match the contract chainId\\\")\\n\\n\\t\\tif (vaults[_vaultId].state == VaultState.EMPTY) {\\n\\t\\t\\tfor (uint256 i = 0; i < requiredTokens.length; i++) {\\n\\t\\t\\t\\tvaults[_vaultId]._tokens.push(\\n\\t\\t\\t\\t\\tTokenQuantity(\\n\\t\\t\\t\\t\\t\\trequiredTokens[i]._address,\\n\\t\\t\\t\\t\\t\\t0,\\n\\t\\t\\t\\t\\t\\trequiredTokens[i]._chainId,\\n\\t\\t\\t\\t\\t\\taddress(0),\\n\\t\\t\\t\\t\\t\\trequiredTokens[i]._aggregator\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t\\tvaults[_vaultId].state = VaultState.OPEN;\\n\\t\\t}\\n\\n\\t\\tfor (uint256 i = 0; i < _tokens.length; i++) {\\n\\t\\t\\t// if (_tokens[i]._chainId != _chainId) {\\n\\t\\t\\t// \\trevert(\\n\\t\\t\\t// \\t\\t\\\"Token chainId does not match the chainId of the contract\\\"\\n\\t\\t\\t// \\t);\\n\\t\\t\\t// }\\n\\t\\t\\tconsole.log(\\n\\t\\t\\t\\t\\\"Token address: %s\\\",\\n\\t\\t\\t\\t_tokens[i]._address,\\n\\t\\t\\t\\ti,\\n\\t\\t\\t\\tvaults[_vaultId]._tokens.length\\n\\t\\t\\t);\\n\\t\\t\\tif (\\n\\t\\t\\t\\t_tokens[i]._quantity + vaults[_vaultId]._tokens[i]._quantity >\\n\\t\\t\\t\\taddressToToken[_tokens[i]._address]._quantity\\n\\t\\t\\t) {\\n\\t\\t\\t\\trevert(\\\"Token quantity exceeds the required amount\\\");\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (_tokens[i]._chainId == _chainId) {\\n\\t\\t\\t\\tIERC20(_tokens[i]._address).transferFrom(\\n\\t\\t\\t\\t\\t_tokens[i]._contributor,\\n\\t\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\t\\t_tokens[i]._quantity\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\tvaults[_vaultId]._tokens[i]._quantity += _tokens[i]._quantity;\\n\\n\\t\\t\\temit Deposit(\\n\\t\\t\\t\\t_vaultId,\\n\\t\\t\\t\\t_tokens[i]._address,\\n\\t\\t\\t\\t_tokens[i]._quantity,\\n\\t\\t\\t\\t_tokens[i]._chainId,\\n\\t\\t\\t\\t_tokens[i]._contributor\\n\\t\\t\\t);\\n\\n\\t\\t\\tif (isMainChain()) {\\n\\t\\t\\t\\tif (accountContributionsPerVault[_vaultId][msg.sender] == 0) {\\n\\t\\t\\t\\t\\tcontributorsByVault[_vaultId].push(msg.sender);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// uint256 price = AggregatorV3Interface(_tokens[i]._aggretator).latestRoundData().answer;\\n\\n\\t\\t\\t\\t// (, /* uint80 roundID */ int answer, , , ) = AggregatorV3Interface(\\n\\t\\t\\t\\t// \\t_tokens[i]._aggregator\\n\\t\\t\\t\\t// ).latestRoundData();\\n\\n\\t\\t\\t\\taccountContributionsPerVault[_vaultId][msg.sender] += _tokens[i]\\n\\t\\t\\t\\t\\t._quantity;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tfor (uint256 i = 0; i < requiredTokens.length; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tvaults[_vaultId]._tokens[i]._quantity <\\n\\t\\t\\t\\trequiredTokens[i]._quantity\\n\\t\\t\\t) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tvaults[_vaultId].state = VaultState.MINTED;\\n\\n\\t\\tif(isMainChain()){\\n\\t\\t\\tdistributeShares(_vaultId);\\n\\t\\t}\\n\\t\\telse{\\n\\t\\t\\tnotifyDepositToMainChain(_depositInfo);\\n\\t\\t}\\n\\t}\\n\\n\\n\\n\\tfunction notifyDepositToMainChain(\\n\\t\\tDepositInfo memory _depositInfo\\n\\t)internal {\\n\\t\\tbytes32 mainChainLockBytes32 = addressToBytes32(mainChainLock);\\n\\t\\tuint256 fee = outbox.quoteDispatch(\\n\\t\\t\\tchainId,\\n\\t\\t\\tmainChainLockBytes32,\\n\\t\\t\\tabi.encode(_depositInfo)\\n\\t\\t);\\n\\t\\toutbox.dispatch{ value: fee }(\\n\\t\\t\\tchainId,\\n\\t\\t\\tmainChainLockBytes32,\\n\\t\\t\\tabi.encode(_depositInfo)\\n\\t\\t);\\n\\t}\\n\\n\\n\\tfunction distributeShares(uint256 _vaultId) internal {\\n\\t\\tuint256 totalContributions = 0;\\n\\t\\tfor (uint256 i = 0; i < contributorsByVault[_vaultId].length; i++) {\\n\\t\\t\\ttotalContributions += accountContributionsPerVault[_vaultId][\\n\\t\\t\\t\\tcontributorsByVault[_vaultId][i]\\n\\t\\t\\t];\\n\\t\\t}\\n\\n\\t\\tfor (uint256 i = 0; i < contributorsByVault[_vaultId].length; i++) {\\n\\t\\t\\tuint256 shares = (accountContributionsPerVault[_vaultId][\\n\\t\\t\\t\\tcontributorsByVault[_vaultId][i]\\n\\t\\t\\t] * etfTokenPerVault) / totalContributions;\\n\\t\\t\\tISimpleERC20(etfToken).mint(\\n\\t\\t\\t\\tcontributorsByVault[_vaultId][i],\\n\\t\\t\\t\\tshares\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction deposit(DepositInfo memory _depositInfo) public {\\n\\t\\t_deposit(_depositInfo, chainId);\\n\\t}\\n\\n\\tfunction handle(\\n\\t\\tuint32 _origin,\\n\\t\\tbytes32 _sender,\\n\\t\\tbytes calldata _message\\n\\t) external payable {\\n\\t\\trequire(\\n\\t\\t\\tbytes32ToAddress(_sender) == sideChainLock,\\n\\t\\t\\t\\\"Sender is not the sideChainLock\\\"\\n\\t\\t);\\n\\n\\t\\tDepositInfo memory _depositInfo = abi.decode(_message, (DepositInfo));\\n\\t\\tuint32 _chainId = _depositInfo.tokens[0]._chainId;\\n\\t\\t_deposit(_depositInfo, _chainId);\\n\\t}\\n\\n\\tfunction burn(uint256 _vaultId) public {\\n\\t\\trequire(\\n\\t\\t\\tvaults[_vaultId].state == VaultState.MINTED,\\n\\t\\t\\t\\\"Vault is not minted\\\"\\n\\t\\t);\\n\\t\\t// require to pay back the etfToken\\n\\t\\trequire(isMainChain(), \\\"Only main chain can burn\\\");\\n\\t\\tISimpleERC20(etfToken).burn(msg.sender, etfTokenPerVault);\\n\\t\\tfor (uint256 j = 0; j < vaults[_vaultId]._tokens.length; j++) {\\n\\t\\t\\tif (vaults[_vaultId]._tokens[j]._chainId == chainId) {\\n\\t\\t\\t\\tIERC20(vaults[_vaultId]._tokens[j]._address).transfer(\\n\\t\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\t\\tvaults[_vaultId]._tokens[j]._quantity\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tvaults[_vaultId].state = VaultState.BURNED;\\n\\t}\\n\\n\\tfunction addressToBytes32(address _addr) internal pure returns (bytes32) {\\n\\t\\treturn bytes32(uint256(uint160(_addr)));\\n\\t}\\n\\n\\tfunction bytes32ToAddress(\\n\\t\\tbytes32 _bytes32\\n\\t) internal pure returns (address) {\\n\\t\\treturn address(uint160(uint256(_bytes32)));\\n\\t}\\n}\\n\",\"keccak256\":\"0xe200e10f2d2a5ee1e9af0415876ad6016ab33a88419e7657228af1010d6e0a6d\",\"license\":\"MIT\"},\"contracts/SimpleERC20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\ninterface ISimpleERC20 is IERC20 {\\n    function mint(address to, uint256 amount) external;\\n    function burn(address sender, uint256 amount) external;\\n}\\n\\ncontract SimpleERC20 is ISimpleERC20, ERC20 {\\n    address public owner = msg.sender;\\n\\n\\tconstructor(\\n\\t\\tstring memory name,\\n\\t\\tstring memory symbol,\\n\\t\\tuint256 initialSupply\\n\\t) ERC20(name, symbol) {\\n\\t\\t_mint(msg.sender, initialSupply);\\n\\t}\\n\\n    function setOwner(address _owner) public {\\n        require(msg.sender == owner, \\\"SimpleERC20: only owner can change owner\\\");\\n        owner = _owner;\\n    }\\n\\n    function mint(address to, uint256 amount) public {\\n        require(msg.sender == owner, \\\"SimpleERC20: only owner can mint\\\");\\n        _mint(to, amount);\\n    }\\n\\n    function burn(address sender, uint256 amount) public {\\n        _burn(sender, amount);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x5d632df58d4e850f3839837f249583f7e630984d84dce6516df2c41e78239596\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002255380380620022558339810160408190526200003491620002dc565b600380546001600160401b03191664010000000063ffffffff8881169190910263ffffffff191691909117908616179055600680546001600160a01b0319166001600160a01b038416179055600781905560005b83518110156200022a576001848281518110620000a957620000a96200043a565b602090810291909101810151825460018082018555600094855293839020825160049092020180546001600160a01b03199081166001600160a01b0393841617825593830151948101949094556040820151600285018054606085015163ffffffff9093166001600160c01b0319909116176401000000009284169290920291909117905560809091015160039093018054909216921691909117905583518490829081106200015d576200015d6200043a565b6020026020010151600260008684815181106200017e576200017e6200043a565b602090810291909101810151516001600160a01b039081168352828201939093526040918201600020845181549085166001600160a01b03199182161782559185015160018201559184015160028301805460608701518616640100000000026001600160c01b031990911663ffffffff909316929092179190911790556080909301516003909101805491909216921691909117905580620002218162000450565b91505062000088565b50505050505062000478565b805163ffffffff811681146200024b57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b03811182821017156200028b576200028b62000250565b60405290565b604051601f8201601f191681016001600160401b0381118282101715620002bc57620002bc62000250565b604052919050565b80516001600160a01b03811681146200024b57600080fd5b600080600080600060a0808789031215620002f657600080fd5b620003018762000236565b955060206200031281890162000236565b604089810151919750906001600160401b03808211156200033257600080fd5b818b0191508b601f8301126200034757600080fd5b8151818111156200035c576200035c62000250565b6200036c858260051b0162000291565b818152858101925090860283018501908d8211156200038a57600080fd5b928501925b818410156200040f5786848f031215620003a95760008081fd5b620003b362000266565b620003be85620002c4565b81528685015187820152620003d586860162000236565b868201526060620003e8818701620002c4565b908201526080620003fb868201620002c4565b90820152835292860192918501916200038f565b809950505050505050506200042760608701620002c4565b9150608086015190509295509295909350565b634e487b7160e01b600052603260045260246000fd5b6000600182016200047157634e487b7160e01b600052601160045260246000fd5b5060010190565b611dcd80620004886000396000f3fe6080604052600436106101145760003560e01c80636b8cf65e116100a05780639c58a5a4116100645780639c58a5a4146103d4578063b834f6fb146103f4578063b98ee2b614610426578063cca3ce2b14610446578063eb6a9aa01461046857600080fd5b80636b8cf65e146102eb5780638c64ea4a1461032a5780639403b6341461036a578063956a45a6146103975780639a8a0592146103b757600080fd5b8063309bfe4a116100e7578063309bfe4a146101d557806342966c68146101f757806356d5d475146102175780636059f0961461022a57806369abaac91461024a57600080fd5b8063014372eb146101195780630badce41146101645780630f45ad4314610186578063250cab39146101bf575b600080fd5b34801561012557600080fd5b5061015161013436600461174e565b600960209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b34801561017057600080fd5b5061018461017f36600461177a565b610488565b005b34801561019257600080fd5b506003546101aa90600160201b900463ffffffff1681565b60405163ffffffff909116815260200161015b565b3480156101cb57600080fd5b5061015160075481565b3480156101e157600080fd5b506101ea6104c1565b60405161015b91906117e6565b34801561020357600080fd5b50610184610212366004611831565b610569565b61018461022536600461185e565b610825565b34801561023657600080fd5b50610184610245366004611978565b6108d1565b34801561025657600080fd5b506102ab610265366004611ab5565b600260208190526000918252604090912080546001820154928201546003909201546001600160a01b03918216939263ffffffff811692600160201b9091048116911685565b604080516001600160a01b039687168152602081019590955263ffffffff909316928401929092528316606083015291909116608082015260a00161015b565b3480156102f757600080fd5b5060035461031290600160401b90046001600160a01b031681565b6040516001600160a01b03909116815260200161015b565b34801561033657600080fd5b5061035d610345366004611831565b600a6020526000908152604090206001015460ff1681565b60405161015b9190611ad7565b34801561037657600080fd5b5061038a610385366004611831565b6108e8565b60405161015b9190611b64565b3480156103a357600080fd5b506102ab6103b2366004611831565b6109e9565b3480156103c357600080fd5b506003546101aa9063ffffffff1681565b3480156103e057600080fd5b50600054610312906001600160a01b031681565b34801561040057600080fd5b50600354600160201b810463ffffffff908116911614604051901515815260200161015b565b34801561043257600080fd5b50610184610441366004611b9c565b610a41565b34801561045257600080fd5b5061045b610b0e565b60405161015b9190611bdf565b34801561047457600080fd5b50600654610312906001600160a01b031681565b6000828152600a6020526040902060019081018054839260ff19909116908360038111156104b8576104b86117ae565b02179055505050565b60408051605a808252610b6082019092526060916000919060208201610b408036833701905050905060005b8151811015610563576000818152600a6020526040902060010154825160ff9091169083908390811061052257610522611bf2565b6020026020010190600381111561053b5761053b6117ae565b9081600381111561054e5761054e6117ae565b9052508061055b81611c1e565b9150506104ed565b50919050565b60026000828152600a602052604090206001015460ff166003811115610591576105916117ae565b146105d95760405162461bcd60e51b815260206004820152601360248201527215985d5b1d081a5cc81b9bdd081b5a5b9d1959606a1b60448201526064015b60405180910390fd5b600354600160201b810463ffffffff90811691161461063a5760405162461bcd60e51b815260206004820152601860248201527f4f6e6c79206d61696e20636861696e2063616e206275726e000000000000000060448201526064016105d0565b600654600754604051632770a7eb60e21b815233600482015260248101919091526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b15801561068a57600080fd5b505af115801561069e573d6000803e3d6000fd5b5050505060005b6000828152600a6020526040902054811015610806576003546000838152600a60205260409020805463ffffffff90921691839081106106e7576106e7611bf2565b600091825260209091206002600490920201015463ffffffff16036107f4576000828152600a6020526040902080548290811061072657610726611bf2565b60009182526020808320600490920290910154848352600a909152604090912080546001600160a01b039092169163a9059cbb9133918590811061076c5761076c611bf2565b9060005260206000209060040201600101546040518363ffffffff1660e01b81526004016107af9291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af11580156107ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f29190611c37565b505b806107fe81611c1e565b9150506106a5565b506000908152600a60205260409020600101805460ff19166003179055565b6000546001600160a01b0316836001600160a01b0316146108885760405162461bcd60e51b815260206004820152601f60248201527f53656e646572206973206e6f74207468652073696465436861696e4c6f636b0060448201526064016105d0565b600061089682840184611978565b9050600081602001516000815181106108b1576108b1611bf2565b60200260200101516040015190506108c98282610bb3565b505050505050565b6003546108e590829063ffffffff16610bb3565b50565b6040805180820190915260608152600060208201526000828152600a60209081526040808320815181546060948102820185018452928101838152909491938593919285929185015b828210156109a95760008481526020908190206040805160a0810182526004860290920180546001600160a01b03908116845260018083015485870152600283015463ffffffff811694860194909452600160201b909304811660608501526003909101541660808301529083529092019101610931565b50505090825250600182015460209091019060ff1660038111156109cf576109cf6117ae565b60038111156109e0576109e06117ae565b90525092915050565b600181815481106109f957600080fd5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b039283169450909263ffffffff811692600160201b9091048116911685565b60035463ffffffff600160201b82048116911603610abd5760405162461bcd60e51b815260206004820152603360248201527f4d61696e20636861696e206c6f636b20616464726573732063616e6e6f742062604482015272329039b2ba1037b71036b0b4b71031b430b4b760691b60648201526084016105d0565b600380546001600160a01b03948516600160401b0268010000000000000000600160e01b0319909116179055600480549284166001600160a01b031993841617905560058054919093169116179055565b60606001805480602002602001604051908101604052809291908181526020016000905b82821015610baa5760008481526020908190206040805160a0810182526004860290920180546001600160a01b03908116845260018083015485870152600283015463ffffffff811694860194909452600160201b909304811660608501526003909101541660808301529083529092019101610b32565b50505050905090565b8151602083015160016000838152600a602052604090206001015460ff166003811115610be257610be26117ae565b1480610c1157506000828152600a602052604081206001015460ff166003811115610c0f57610c0f6117ae565b145b610c5d5760405162461bcd60e51b815260206004820152601a60248201527f5661756c74206973206e6f74206f70656e206f7220656d70747900000000000060448201526064016105d0565b6000828152600a602052604081206001015460ff166003811115610c8357610c836117ae565b03610e1f5760005b600154811015610dff57600a60008481526020019081526020016000206000016040518060a0016040528060018481548110610cc957610cc9611bf2565b600091825260208083206004909202909101546001600160a01b031683528201526001805460409092019185908110610d0457610d04611bf2565b600091825260208083206002600490930201919091015463ffffffff1683528201526001805460409092019185908110610d4057610d40611bf2565b60009182526020808320600360049384029091018101546001600160a01b039081169095528654600181810189559785529382902086519490930290920180549385166001600160a01b03199485161781559085015195810195909555604084015160028601805460608701518616600160201b026001600160c01b031990911663ffffffff90931692909217919091179055608090930151939092018054939091169290911691909117905580610df781611c1e565b915050610c8b565b506000828152600a602052604090206001908101805460ff191690911790555b60005b81518110156112bf57610e8e60405180604001604052806011815260200170546f6b656e20616464726573733a20257360781b815250838381518110610e6a57610e6a611bf2565b602090810291909101810151516000878152600a909252604090912054849061139d565b60026000838381518110610ea457610ea4611bf2565b6020026020010151600001516001600160a01b03166001600160a01b0316815260200190815260200160002060010154600a60008581526020019081526020016000206000018281548110610efb57610efb611bf2565b906000526020600020906004020160010154838381518110610f1f57610f1f611bf2565b602002602001015160200151610f359190611c59565b1115610f965760405162461bcd60e51b815260206004820152602a60248201527f546f6b656e207175616e746974792065786365656473207468652072657175696044820152691c995908185b5bdd5b9d60b21b60648201526084016105d0565b8363ffffffff16828281518110610faf57610faf611bf2565b60200260200101516040015163ffffffff16036110ab57818181518110610fd857610fd8611bf2565b6020026020010151600001516001600160a01b03166323b872dd83838151811061100457611004611bf2565b6020026020010151606001513085858151811061102357611023611bf2565b60209081029190910181015101516040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af1158015611085573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a99190611c37565b505b8181815181106110bd576110bd611bf2565b602002602001015160200151600a600085815260200190815260200160002060000182815481106110f0576110f0611bf2565b906000526020600020906004020160010160008282546111109190611c59565b925050819055507f80590f9d7015c327349ea64242fc29353801fcad956721a0e45f725338db06f48383838151811061114b5761114b611bf2565b60200260200101516000015184848151811061116957611169611bf2565b60200260200101516020015185858151811061118757611187611bf2565b6020026020010151604001518686815181106111a5576111a5611bf2565b6020026020010151606001516040516111ef9594939291909485526001600160a01b039384166020860152604085019290925263ffffffff16606084015216608082015260a00190565b60405180910390a160035463ffffffff600160201b820481169116036112ad576000838152600960209081526040808320338452909152812054900361125e5760008381526008602090815260408220805460018101825590835291200180546001600160a01b031916331790555b81818151811061127057611270611bf2565b60209081029190910181015181015160008581526009835260408082203383529093529182208054919290916112a7908490611c59565b90915550505b806112b781611c1e565b915050610e22565b5060005b60015481101561134a57600181815481106112e0576112e0611bf2565b906000526020600020906004020160010154600a6000858152602001908152602001600020600001828154811061131957611319611bf2565b9060005260206000209060040201600101541015611338575050505050565b8061134281611c1e565b9150506112c3565b506000828152600a60205260409020600101805460ff1916600217905560035463ffffffff808216600160201b909204160361138e57611389826113e6565b611397565b611397846115b7565b50505050565b611397848484846040516024016113b79493929190611cb2565b60408051601f198184030181529190526020810180516001600160e01b0316637c7a8d8f60e11b17905261170d565b6000805b6000838152600860205260409020548110156114705760008381526009602090815260408083206008909252822080549192918490811061142d5761142d611bf2565b60009182526020808320909101546001600160a01b0316835282019290925260400190205461145c9083611c59565b91508061146881611c1e565b9150506113ea565b5060005b6000838152600860205260409020548110156115b2576007546000848152600960209081526040808320600890925282208054929386939092918591879081106114c0576114c0611bf2565b60009182526020808320909101546001600160a01b031683528201929092526040019020546114ef9190611cea565b6114f99190611d01565b600654600086815260086020526040902080549293506001600160a01b03909116916340c10f1991908590811061153257611532611bf2565b60009182526020909120015460405160e083901b6001600160e01b03191681526001600160a01b03909116600482015260248101849052604401600060405180830381600087803b15801561158657600080fd5b505af115801561159a573d6000803e3d6000fd5b505050505080806115aa90611c1e565b915050611474565b505050565b6003546004546040516001600160a01b03600160401b840481169360009390911691639c42bd189163ffffffff169085906115f6908890602001611d23565b6040516020818303038152906040526040518463ffffffff1660e01b815260040161162393929190611d50565b602060405180830381865afa158015611640573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116649190611d7e565b6004546003546040519293506001600160a01b039091169163fa31de0191849163ffffffff90911690869061169d908990602001611d23565b6040516020818303038152906040526040518563ffffffff1660e01b81526004016116ca93929190611d50565b60206040518083038185885af11580156116e8573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906113979190611d7e565b6108e58160006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b80356001600160a01b038116811461174957600080fd5b919050565b6000806040838503121561176157600080fd5b8235915061177160208401611732565b90509250929050565b6000806040838503121561178d57600080fd5b823591506020830135600481106117a357600080fd5b809150509250929050565b634e487b7160e01b600052602160045260246000fd5b600481106117e257634e487b7160e01b600052602160045260246000fd5b9052565b6020808252825182820181905260009190848201906040850190845b81811015611825576118158385516117c4565b9284019291840191600101611802565b50909695505050505050565b60006020828403121561184357600080fd5b5035919050565b803563ffffffff8116811461174957600080fd5b6000806000806060858703121561187457600080fd5b61187d8561184a565b935060208501359250604085013567ffffffffffffffff808211156118a157600080fd5b818701915087601f8301126118b557600080fd5b8135818111156118c457600080fd5b8860208285010111156118d657600080fd5b95989497505060200194505050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561191e5761191e6118e5565b60405290565b60405160a0810167ffffffffffffffff8111828210171561191e5761191e6118e5565b604051601f8201601f1916810167ffffffffffffffff81118282101715611970576119706118e5565b604052919050565b6000602080838503121561198b57600080fd5b823567ffffffffffffffff808211156119a357600080fd5b818501915060408083880312156119b957600080fd5b6119c16118fb565b8335815284840135838111156119d657600080fd5b80850194505087601f8501126119eb57600080fd5b8335838111156119fd576119fd6118e5565b611a0b868260051b01611947565b818152868101945060a091820286018701918a831115611a2a57600080fd5b958701955b82871015611aa25780878c031215611a475760008081fd5b611a4f611924565b611a5888611732565b81528888013589820152611a6d86890161184a565b868201526060611a7e818a01611732565b908201526080611a8f898201611732565b9082015286529586019594870194611a2f565b5095820195909552979650505050505050565b600060208284031215611ac757600080fd5b611ad082611732565b9392505050565b60208101611ae582846117c4565b92915050565b600081518084526020808501945080840160005b83811015611b5957815180516001600160a01b03908116895284820151858a015260408083015163ffffffff16908a01526060808301518216908a0152608091820151169088015260a09096019590820190600101611aff565b509495945050505050565b602081526000825160406020840152611b806060840182611aeb565b90506020840151611b9460408501826117c4565b509392505050565b600080600060608486031215611bb157600080fd5b611bba84611732565b9250611bc860208501611732565b9150611bd660408501611732565b90509250925092565b602081526000611ad06020830184611aeb565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611c3057611c30611c08565b5060010190565b600060208284031215611c4957600080fd5b81518015158114611ad057600080fd5b80820180821115611ae557611ae5611c08565b6000815180845260005b81811015611c9257602081850181015186830182015201611c76565b506000602082860101526020601f19601f83011685010191505092915050565b608081526000611cc56080830187611c6c565b6001600160a01b03959095166020830152506040810192909252606090910152919050565b8082028115828204841417611ae557611ae5611c08565b600082611d1e57634e487b7160e01b600052601260045260246000fd5b500490565b602081528151602082015260006020830151604080840152611d486060840182611aeb565b949350505050565b63ffffffff84168152826020820152606060408201526000611d756060830184611c6c565b95945050505050565b600060208284031215611d9057600080fd5b505191905056fea2646970667358221220672d3f5895db284514e4d0093b86077ad2d8a3d868e66457d4b79585d36c7dfc64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106101145760003560e01c80636b8cf65e116100a05780639c58a5a4116100645780639c58a5a4146103d4578063b834f6fb146103f4578063b98ee2b614610426578063cca3ce2b14610446578063eb6a9aa01461046857600080fd5b80636b8cf65e146102eb5780638c64ea4a1461032a5780639403b6341461036a578063956a45a6146103975780639a8a0592146103b757600080fd5b8063309bfe4a116100e7578063309bfe4a146101d557806342966c68146101f757806356d5d475146102175780636059f0961461022a57806369abaac91461024a57600080fd5b8063014372eb146101195780630badce41146101645780630f45ad4314610186578063250cab39146101bf575b600080fd5b34801561012557600080fd5b5061015161013436600461174e565b600960209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b34801561017057600080fd5b5061018461017f36600461177a565b610488565b005b34801561019257600080fd5b506003546101aa90600160201b900463ffffffff1681565b60405163ffffffff909116815260200161015b565b3480156101cb57600080fd5b5061015160075481565b3480156101e157600080fd5b506101ea6104c1565b60405161015b91906117e6565b34801561020357600080fd5b50610184610212366004611831565b610569565b61018461022536600461185e565b610825565b34801561023657600080fd5b50610184610245366004611978565b6108d1565b34801561025657600080fd5b506102ab610265366004611ab5565b600260208190526000918252604090912080546001820154928201546003909201546001600160a01b03918216939263ffffffff811692600160201b9091048116911685565b604080516001600160a01b039687168152602081019590955263ffffffff909316928401929092528316606083015291909116608082015260a00161015b565b3480156102f757600080fd5b5060035461031290600160401b90046001600160a01b031681565b6040516001600160a01b03909116815260200161015b565b34801561033657600080fd5b5061035d610345366004611831565b600a6020526000908152604090206001015460ff1681565b60405161015b9190611ad7565b34801561037657600080fd5b5061038a610385366004611831565b6108e8565b60405161015b9190611b64565b3480156103a357600080fd5b506102ab6103b2366004611831565b6109e9565b3480156103c357600080fd5b506003546101aa9063ffffffff1681565b3480156103e057600080fd5b50600054610312906001600160a01b031681565b34801561040057600080fd5b50600354600160201b810463ffffffff908116911614604051901515815260200161015b565b34801561043257600080fd5b50610184610441366004611b9c565b610a41565b34801561045257600080fd5b5061045b610b0e565b60405161015b9190611bdf565b34801561047457600080fd5b50600654610312906001600160a01b031681565b6000828152600a6020526040902060019081018054839260ff19909116908360038111156104b8576104b86117ae565b02179055505050565b60408051605a808252610b6082019092526060916000919060208201610b408036833701905050905060005b8151811015610563576000818152600a6020526040902060010154825160ff9091169083908390811061052257610522611bf2565b6020026020010190600381111561053b5761053b6117ae565b9081600381111561054e5761054e6117ae565b9052508061055b81611c1e565b9150506104ed565b50919050565b60026000828152600a602052604090206001015460ff166003811115610591576105916117ae565b146105d95760405162461bcd60e51b815260206004820152601360248201527215985d5b1d081a5cc81b9bdd081b5a5b9d1959606a1b60448201526064015b60405180910390fd5b600354600160201b810463ffffffff90811691161461063a5760405162461bcd60e51b815260206004820152601860248201527f4f6e6c79206d61696e20636861696e2063616e206275726e000000000000000060448201526064016105d0565b600654600754604051632770a7eb60e21b815233600482015260248101919091526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b15801561068a57600080fd5b505af115801561069e573d6000803e3d6000fd5b5050505060005b6000828152600a6020526040902054811015610806576003546000838152600a60205260409020805463ffffffff90921691839081106106e7576106e7611bf2565b600091825260209091206002600490920201015463ffffffff16036107f4576000828152600a6020526040902080548290811061072657610726611bf2565b60009182526020808320600490920290910154848352600a909152604090912080546001600160a01b039092169163a9059cbb9133918590811061076c5761076c611bf2565b9060005260206000209060040201600101546040518363ffffffff1660e01b81526004016107af9291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af11580156107ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f29190611c37565b505b806107fe81611c1e565b9150506106a5565b506000908152600a60205260409020600101805460ff19166003179055565b6000546001600160a01b0316836001600160a01b0316146108885760405162461bcd60e51b815260206004820152601f60248201527f53656e646572206973206e6f74207468652073696465436861696e4c6f636b0060448201526064016105d0565b600061089682840184611978565b9050600081602001516000815181106108b1576108b1611bf2565b60200260200101516040015190506108c98282610bb3565b505050505050565b6003546108e590829063ffffffff16610bb3565b50565b6040805180820190915260608152600060208201526000828152600a60209081526040808320815181546060948102820185018452928101838152909491938593919285929185015b828210156109a95760008481526020908190206040805160a0810182526004860290920180546001600160a01b03908116845260018083015485870152600283015463ffffffff811694860194909452600160201b909304811660608501526003909101541660808301529083529092019101610931565b50505090825250600182015460209091019060ff1660038111156109cf576109cf6117ae565b60038111156109e0576109e06117ae565b90525092915050565b600181815481106109f957600080fd5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b039283169450909263ffffffff811692600160201b9091048116911685565b60035463ffffffff600160201b82048116911603610abd5760405162461bcd60e51b815260206004820152603360248201527f4d61696e20636861696e206c6f636b20616464726573732063616e6e6f742062604482015272329039b2ba1037b71036b0b4b71031b430b4b760691b60648201526084016105d0565b600380546001600160a01b03948516600160401b0268010000000000000000600160e01b0319909116179055600480549284166001600160a01b031993841617905560058054919093169116179055565b60606001805480602002602001604051908101604052809291908181526020016000905b82821015610baa5760008481526020908190206040805160a0810182526004860290920180546001600160a01b03908116845260018083015485870152600283015463ffffffff811694860194909452600160201b909304811660608501526003909101541660808301529083529092019101610b32565b50505050905090565b8151602083015160016000838152600a602052604090206001015460ff166003811115610be257610be26117ae565b1480610c1157506000828152600a602052604081206001015460ff166003811115610c0f57610c0f6117ae565b145b610c5d5760405162461bcd60e51b815260206004820152601a60248201527f5661756c74206973206e6f74206f70656e206f7220656d70747900000000000060448201526064016105d0565b6000828152600a602052604081206001015460ff166003811115610c8357610c836117ae565b03610e1f5760005b600154811015610dff57600a60008481526020019081526020016000206000016040518060a0016040528060018481548110610cc957610cc9611bf2565b600091825260208083206004909202909101546001600160a01b031683528201526001805460409092019185908110610d0457610d04611bf2565b600091825260208083206002600490930201919091015463ffffffff1683528201526001805460409092019185908110610d4057610d40611bf2565b60009182526020808320600360049384029091018101546001600160a01b039081169095528654600181810189559785529382902086519490930290920180549385166001600160a01b03199485161781559085015195810195909555604084015160028601805460608701518616600160201b026001600160c01b031990911663ffffffff90931692909217919091179055608090930151939092018054939091169290911691909117905580610df781611c1e565b915050610c8b565b506000828152600a602052604090206001908101805460ff191690911790555b60005b81518110156112bf57610e8e60405180604001604052806011815260200170546f6b656e20616464726573733a20257360781b815250838381518110610e6a57610e6a611bf2565b602090810291909101810151516000878152600a909252604090912054849061139d565b60026000838381518110610ea457610ea4611bf2565b6020026020010151600001516001600160a01b03166001600160a01b0316815260200190815260200160002060010154600a60008581526020019081526020016000206000018281548110610efb57610efb611bf2565b906000526020600020906004020160010154838381518110610f1f57610f1f611bf2565b602002602001015160200151610f359190611c59565b1115610f965760405162461bcd60e51b815260206004820152602a60248201527f546f6b656e207175616e746974792065786365656473207468652072657175696044820152691c995908185b5bdd5b9d60b21b60648201526084016105d0565b8363ffffffff16828281518110610faf57610faf611bf2565b60200260200101516040015163ffffffff16036110ab57818181518110610fd857610fd8611bf2565b6020026020010151600001516001600160a01b03166323b872dd83838151811061100457611004611bf2565b6020026020010151606001513085858151811061102357611023611bf2565b60209081029190910181015101516040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af1158015611085573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a99190611c37565b505b8181815181106110bd576110bd611bf2565b602002602001015160200151600a600085815260200190815260200160002060000182815481106110f0576110f0611bf2565b906000526020600020906004020160010160008282546111109190611c59565b925050819055507f80590f9d7015c327349ea64242fc29353801fcad956721a0e45f725338db06f48383838151811061114b5761114b611bf2565b60200260200101516000015184848151811061116957611169611bf2565b60200260200101516020015185858151811061118757611187611bf2565b6020026020010151604001518686815181106111a5576111a5611bf2565b6020026020010151606001516040516111ef9594939291909485526001600160a01b039384166020860152604085019290925263ffffffff16606084015216608082015260a00190565b60405180910390a160035463ffffffff600160201b820481169116036112ad576000838152600960209081526040808320338452909152812054900361125e5760008381526008602090815260408220805460018101825590835291200180546001600160a01b031916331790555b81818151811061127057611270611bf2565b60209081029190910181015181015160008581526009835260408082203383529093529182208054919290916112a7908490611c59565b90915550505b806112b781611c1e565b915050610e22565b5060005b60015481101561134a57600181815481106112e0576112e0611bf2565b906000526020600020906004020160010154600a6000858152602001908152602001600020600001828154811061131957611319611bf2565b9060005260206000209060040201600101541015611338575050505050565b8061134281611c1e565b9150506112c3565b506000828152600a60205260409020600101805460ff1916600217905560035463ffffffff808216600160201b909204160361138e57611389826113e6565b611397565b611397846115b7565b50505050565b611397848484846040516024016113b79493929190611cb2565b60408051601f198184030181529190526020810180516001600160e01b0316637c7a8d8f60e11b17905261170d565b6000805b6000838152600860205260409020548110156114705760008381526009602090815260408083206008909252822080549192918490811061142d5761142d611bf2565b60009182526020808320909101546001600160a01b0316835282019290925260400190205461145c9083611c59565b91508061146881611c1e565b9150506113ea565b5060005b6000838152600860205260409020548110156115b2576007546000848152600960209081526040808320600890925282208054929386939092918591879081106114c0576114c0611bf2565b60009182526020808320909101546001600160a01b031683528201929092526040019020546114ef9190611cea565b6114f99190611d01565b600654600086815260086020526040902080549293506001600160a01b03909116916340c10f1991908590811061153257611532611bf2565b60009182526020909120015460405160e083901b6001600160e01b03191681526001600160a01b03909116600482015260248101849052604401600060405180830381600087803b15801561158657600080fd5b505af115801561159a573d6000803e3d6000fd5b505050505080806115aa90611c1e565b915050611474565b505050565b6003546004546040516001600160a01b03600160401b840481169360009390911691639c42bd189163ffffffff169085906115f6908890602001611d23565b6040516020818303038152906040526040518463ffffffff1660e01b815260040161162393929190611d50565b602060405180830381865afa158015611640573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116649190611d7e565b6004546003546040519293506001600160a01b039091169163fa31de0191849163ffffffff90911690869061169d908990602001611d23565b6040516020818303038152906040526040518563ffffffff1660e01b81526004016116ca93929190611d50565b60206040518083038185885af11580156116e8573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906113979190611d7e565b6108e58160006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b80356001600160a01b038116811461174957600080fd5b919050565b6000806040838503121561176157600080fd5b8235915061177160208401611732565b90509250929050565b6000806040838503121561178d57600080fd5b823591506020830135600481106117a357600080fd5b809150509250929050565b634e487b7160e01b600052602160045260246000fd5b600481106117e257634e487b7160e01b600052602160045260246000fd5b9052565b6020808252825182820181905260009190848201906040850190845b81811015611825576118158385516117c4565b9284019291840191600101611802565b50909695505050505050565b60006020828403121561184357600080fd5b5035919050565b803563ffffffff8116811461174957600080fd5b6000806000806060858703121561187457600080fd5b61187d8561184a565b935060208501359250604085013567ffffffffffffffff808211156118a157600080fd5b818701915087601f8301126118b557600080fd5b8135818111156118c457600080fd5b8860208285010111156118d657600080fd5b95989497505060200194505050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561191e5761191e6118e5565b60405290565b60405160a0810167ffffffffffffffff8111828210171561191e5761191e6118e5565b604051601f8201601f1916810167ffffffffffffffff81118282101715611970576119706118e5565b604052919050565b6000602080838503121561198b57600080fd5b823567ffffffffffffffff808211156119a357600080fd5b818501915060408083880312156119b957600080fd5b6119c16118fb565b8335815284840135838111156119d657600080fd5b80850194505087601f8501126119eb57600080fd5b8335838111156119fd576119fd6118e5565b611a0b868260051b01611947565b818152868101945060a091820286018701918a831115611a2a57600080fd5b958701955b82871015611aa25780878c031215611a475760008081fd5b611a4f611924565b611a5888611732565b81528888013589820152611a6d86890161184a565b868201526060611a7e818a01611732565b908201526080611a8f898201611732565b9082015286529586019594870194611a2f565b5095820195909552979650505050505050565b600060208284031215611ac757600080fd5b611ad082611732565b9392505050565b60208101611ae582846117c4565b92915050565b600081518084526020808501945080840160005b83811015611b5957815180516001600160a01b03908116895284820151858a015260408083015163ffffffff16908a01526060808301518216908a0152608091820151169088015260a09096019590820190600101611aff565b509495945050505050565b602081526000825160406020840152611b806060840182611aeb565b90506020840151611b9460408501826117c4565b509392505050565b600080600060608486031215611bb157600080fd5b611bba84611732565b9250611bc860208501611732565b9150611bd660408501611732565b90509250925092565b602081526000611ad06020830184611aeb565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611c3057611c30611c08565b5060010190565b600060208284031215611c4957600080fd5b81518015158114611ad057600080fd5b80820180821115611ae557611ae5611c08565b6000815180845260005b81811015611c9257602081850181015186830182015201611c76565b506000602082860101526020601f19601f83011685010191505092915050565b608081526000611cc56080830187611c6c565b6001600160a01b03959095166020830152506040810192909252606090910152919050565b8082028115828204841417611ae557611ae5611c08565b600082611d1e57634e487b7160e01b600052601260045260246000fd5b500490565b602081528151602082015260006020830151604080840152611d486060840182611aeb565b949350505050565b63ffffffff84168152826020820152606060408201526000611d756060830184611c6c565b95945050505050565b600060208284031215611d9057600080fd5b505191905056fea2646970667358221220672d3f5895db284514e4d0093b86077ad2d8a3d868e66457d4b79585d36c7dfc64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1191,
        "contract": "contracts/ETFLock.sol:ETFLock",
        "label": "sideChainLock",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1195,
        "contract": "contracts/ETFLock.sol:ETFLock",
        "label": "requiredTokens",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_struct(TokenQuantity)1160_storage)dyn_storage"
      },
      {
        "astId": 1200,
        "contract": "contracts/ETFLock.sol:ETFLock",
        "label": "addressToToken",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(TokenQuantity)1160_storage)"
      },
      {
        "astId": 1202,
        "contract": "contracts/ETFLock.sol:ETFLock",
        "label": "chainId",
        "offset": 0,
        "slot": "3",
        "type": "t_uint32"
      },
      {
        "astId": 1204,
        "contract": "contracts/ETFLock.sol:ETFLock",
        "label": "mainChainId",
        "offset": 4,
        "slot": "3",
        "type": "t_uint32"
      },
      {
        "astId": 1206,
        "contract": "contracts/ETFLock.sol:ETFLock",
        "label": "mainChainLock",
        "offset": 8,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1209,
        "contract": "contracts/ETFLock.sol:ETFLock",
        "label": "outbox",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IMailbox)247"
      },
      {
        "astId": 1212,
        "contract": "contracts/ETFLock.sol:ETFLock",
        "label": "securityModule",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IInterchainSecurityModule)73"
      },
      {
        "astId": 1214,
        "contract": "contracts/ETFLock.sol:ETFLock",
        "label": "etfToken",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 1216,
        "contract": "contracts/ETFLock.sol:ETFLock",
        "label": "etfTokenPerVault",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1221,
        "contract": "contracts/ETFLock.sol:ETFLock",
        "label": "contributorsByVault",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 1227,
        "contract": "contracts/ETFLock.sol:ETFLock",
        "label": "accountContributionsPerVault",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1244,
        "contract": "contracts/ETFLock.sol:ETFLock",
        "label": "vaults",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_struct(Vault)1168_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(TokenQuantity)1160_storage)dyn_storage": {
        "base": "t_struct(TokenQuantity)1160_storage",
        "encoding": "dynamic_array",
        "label": "struct TokenQuantity[]",
        "numberOfBytes": "32"
      },
      "t_contract(IInterchainSecurityModule)73": {
        "encoding": "inplace",
        "label": "contract IInterchainSecurityModule",
        "numberOfBytes": "20"
      },
      "t_contract(IMailbox)247": {
        "encoding": "inplace",
        "label": "contract IMailbox",
        "numberOfBytes": "20"
      },
      "t_enum(VaultState)1173": {
        "encoding": "inplace",
        "label": "enum VaultState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(TokenQuantity)1160_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TokenQuantity)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenQuantity)1160_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Vault)1168_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Vault)",
        "numberOfBytes": "32",
        "value": "t_struct(Vault)1168_storage"
      },
      "t_struct(TokenQuantity)1160_storage": {
        "encoding": "inplace",
        "label": "struct TokenQuantity",
        "members": [
          {
            "astId": 1151,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "_address",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1153,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "_quantity",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1155,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "_chainId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 1157,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "_contributor",
            "offset": 4,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1159,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "_aggregator",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Vault)1168_storage": {
        "encoding": "inplace",
        "label": "struct Vault",
        "members": [
          {
            "astId": 1164,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "_tokens",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(TokenQuantity)1160_storage)dyn_storage"
          },
          {
            "astId": 1167,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "state",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(VaultState)1173"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}