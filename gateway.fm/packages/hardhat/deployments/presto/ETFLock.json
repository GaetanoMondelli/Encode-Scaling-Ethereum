{
  "address": "0x84827596bFd9D4e9f723d448c751D78Fa506F386",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_mainChain",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_chainId",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "_address",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_quantity",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "_chainId",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "_contributor",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "_tokenId",
              "type": "uint64"
            }
          ],
          "internalType": "struct TokenQuantity[]",
          "name": "_requiredTokens",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "_etfToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_etfTokenPerVault",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_chainId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_contributor",
          "type": "address"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "accountContributionsPerVault",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_chainId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_contributor",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_tokenId",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chainId",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "vaultId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "_address",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "_quantity",
                  "type": "uint256"
                },
                {
                  "internalType": "uint32",
                  "name": "_chainId",
                  "type": "uint32"
                },
                {
                  "internalType": "address",
                  "name": "_contributor",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "_tokenId",
                  "type": "uint64"
                }
              ],
              "internalType": "struct TokenQuantity[]",
              "name": "tokens",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct DepositInfo",
          "name": "_depositInfo",
          "type": "tuple"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "etfToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "etfTokenPerVault",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "_address",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_quantity",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "_chainId",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "_contributor",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "_tokenId",
              "type": "uint64"
            }
          ],
          "internalType": "struct TokenQuantity",
          "name": "_tokenQuantity",
          "type": "tuple"
        }
      ],
      "name": "getIndexForDepositInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequiredTokens",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "_address",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_quantity",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "_chainId",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "_contributor",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "_tokenId",
              "type": "uint64"
            }
          ],
          "internalType": "struct TokenQuantity[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultId",
          "type": "uint256"
        }
      ],
      "name": "getVault",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "_address",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "_quantity",
                  "type": "uint256"
                },
                {
                  "internalType": "uint32",
                  "name": "_chainId",
                  "type": "uint32"
                },
                {
                  "internalType": "address",
                  "name": "_contributor",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "_tokenId",
                  "type": "uint64"
                }
              ],
              "internalType": "struct TokenQuantity[]",
              "name": "_tokens",
              "type": "tuple[]"
            },
            {
              "internalType": "enum VaultState",
              "name": "state",
              "type": "uint8"
            }
          ],
          "internalType": "struct Vault",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVaultStates",
      "outputs": [
        {
          "internalType": "enum VaultState[]",
          "name": "",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_origin",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_sender",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "handle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isMainChain",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mainChainId",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mainChainLock",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "receivedMessages",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requiredTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_chainId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_contributor",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_tokenId",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sideChainLock",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_sideChainId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_outbox",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_securityModule",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_quasarAddress",
          "type": "address"
        }
      ],
      "name": "setMainChainParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mainChainLock",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_outbox",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_securityModule",
          "type": "address"
        }
      ],
      "name": "setSideChainParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultId",
          "type": "uint256"
        },
        {
          "internalType": "enum VaultState",
          "name": "_state",
          "type": "uint8"
        }
      ],
      "name": "setVaultState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sideChainId",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sideChainLock",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vaults",
      "outputs": [
        {
          "internalType": "enum VaultState",
          "name": "state",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0ca701d8b9ed5396504422232718eef7f087bdc872a514862b14e287323a1b86",
  "receipt": {
    "to": null,
    "from": "0x2a1F5eB3e84e58e6F1e565306298B9dE1273f203",
    "contractAddress": "0x84827596bFd9D4e9f723d448c751D78Fa506F386",
    "transactionIndex": 0,
    "gasUsed": "2529351",
    "logsBloom": "0x
    "blockHash": "0x03a2ba5890d86447dc4d5da471fa5499462ce647fcad2feebf512b18a77fd42c",
    "transactionHash": "0x0ca701d8b9ed5396504422232718eef7f087bdc872a514862b14e287323a1b86",
    "logs": [],
    "blockNumber": 15962,
    "cumulativeGasUsed": "2529351",
    "status": 1,
    "byzantium": true
  },
  "args": [
    686669576,
    686669576,
    [
      {
        "_address": "0xd219DBfBC2dF0e483CAeB95dE5cfA5F516904566",
        "_quantity": "100000000000000000000",
        "_chainId": 686669576,
        "_contributor": "0x2a1F5eB3e84e58e6F1e565306298B9dE1273f203",
        "_tokenId": 1,
        "_aggregator": "0xa7fC563eFa7f2B737E41Bf975e6cF1D46f0E4Ed8"
      },
      {
        "_address": "0x84b3A350358cA790DA07e351F0ADFb3796666eEe",
        "_quantity": "200000000000000000000",
        "_chainId": 686669576,
        "_contributor": "0x2a1F5eB3e84e58e6F1e565306298B9dE1273f203",
        "_tokenId": 2,
        "_aggregator": "0xa7fC563eFa7f2B737E41Bf975e6cF1D46f0E4Ed8"
      },
      {
        "_address": "0xA0ac5c99C36128C1De7F88e4f0894D8859Bbc2B2",
        "_quantity": "100000000000000000000",
        "_chainId": 11155111,
        "_contributor": "0x2a1F5eB3e84e58e6F1e565306298B9dE1273f203",
        "_tokenId": 3
      }
    ],
    "0x73a7d1B252300b2e2e9a1119D1E490C6F9bf9c9B",
    "100000000000000000000"
  ],
  "numDeployments": 3,
  "solcInputHash": "3afbea516192c56c8e5c485fa5cc2c93",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_mainChain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_contributor\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_tokenId\",\"type\":\"uint64\"}],\"internalType\":\"struct TokenQuantity[]\",\"name\":\"_requiredTokens\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_etfToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_etfTokenPerVault\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_contributor\",\"type\":\"address\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountContributionsPerVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_contributor\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_tokenId\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_contributor\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_tokenId\",\"type\":\"uint64\"}],\"internalType\":\"struct TokenQuantity[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"}],\"internalType\":\"struct DepositInfo\",\"name\":\"_depositInfo\",\"type\":\"tuple\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"etfToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"etfTokenPerVault\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_contributor\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_tokenId\",\"type\":\"uint64\"}],\"internalType\":\"struct TokenQuantity\",\"name\":\"_tokenQuantity\",\"type\":\"tuple\"}],\"name\":\"getIndexForDepositInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequiredTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_contributor\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_tokenId\",\"type\":\"uint64\"}],\"internalType\":\"struct TokenQuantity[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"getVault\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_contributor\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_tokenId\",\"type\":\"uint64\"}],\"internalType\":\"struct TokenQuantity[]\",\"name\":\"_tokens\",\"type\":\"tuple[]\"},{\"internalType\":\"enum VaultState\",\"name\":\"state\",\"type\":\"uint8\"}],\"internalType\":\"struct Vault\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultStates\",\"outputs\":[{\"internalType\":\"enum VaultState[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_origin\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_sender\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"handle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMainChain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainChainId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainChainLock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"receivedMessages\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requiredTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_contributor\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_tokenId\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sideChainLock\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_sideChainId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_outbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_securityModule\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_quasarAddress\",\"type\":\"address\"}],\"name\":\"setMainChainParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mainChainLock\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_outbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_securityModule\",\"type\":\"address\"}],\"name\":\"setSideChainParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"enum VaultState\",\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"setVaultState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sideChainId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sideChainLock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaults\",\"outputs\":[{\"internalType\":\"enum VaultState\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ETFLock.sol\":\"ETFLock\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@hyperlane-xyz/core/contracts/interfaces/IInterchainSecurityModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\ninterface IInterchainSecurityModule {\\n    enum Types {\\n        UNUSED,\\n        ROUTING,\\n        AGGREGATION,\\n        LEGACY_MULTISIG,\\n        MERKLE_ROOT_MULTISIG,\\n        MESSAGE_ID_MULTISIG,\\n        NULL, // used with relayer carrying no metadata\\n        CCIP_READ\\n    }\\n\\n    /**\\n     * @notice Returns an enum that represents the type of security model\\n     * encoded by this ISM.\\n     * @dev Relayers infer how to fetch and format metadata.\\n     */\\n    function moduleType() external view returns (uint8);\\n\\n    /**\\n     * @notice Defines a security model responsible for verifying interchain\\n     * messages based on the provided metadata.\\n     * @param _metadata Off-chain metadata provided by a relayer, specific to\\n     * the security model encoded by the module (e.g. validator signatures)\\n     * @param _message Hyperlane encoded interchain message\\n     * @return True if the message was verified\\n     */\\n    function verify(\\n        bytes calldata _metadata,\\n        bytes calldata _message\\n    ) external returns (bool);\\n}\\n\\ninterface ISpecifiesInterchainSecurityModule {\\n    function interchainSecurityModule()\\n        external\\n        view\\n        returns (IInterchainSecurityModule);\\n}\\n\",\"keccak256\":\"0xd144a00a15eef18012f8dae28ca1a7d965012f88ff4a07382a172ae6e02811ce\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/interfaces/IMailbox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.8.0;\\n\\nimport {IInterchainSecurityModule} from \\\"./IInterchainSecurityModule.sol\\\";\\nimport {IPostDispatchHook} from \\\"./hooks/IPostDispatchHook.sol\\\";\\n\\ninterface IMailbox {\\n    // ============ Events ============\\n    /**\\n     * @notice Emitted when a new message is dispatched via Hyperlane\\n     * @param sender The address that dispatched the message\\n     * @param destination The destination domain of the message\\n     * @param recipient The message recipient address on `destination`\\n     * @param message Raw bytes of message\\n     */\\n    event Dispatch(\\n        address indexed sender,\\n        uint32 indexed destination,\\n        bytes32 indexed recipient,\\n        bytes message\\n    );\\n\\n    /**\\n     * @notice Emitted when a new message is dispatched via Hyperlane\\n     * @param messageId The unique message identifier\\n     */\\n    event DispatchId(bytes32 indexed messageId);\\n\\n    /**\\n     * @notice Emitted when a Hyperlane message is processed\\n     * @param messageId The unique message identifier\\n     */\\n    event ProcessId(bytes32 indexed messageId);\\n\\n    /**\\n     * @notice Emitted when a Hyperlane message is delivered\\n     * @param origin The origin domain of the message\\n     * @param sender The message sender address on `origin`\\n     * @param recipient The address that handled the message\\n     */\\n    event Process(\\n        uint32 indexed origin,\\n        bytes32 indexed sender,\\n        address indexed recipient\\n    );\\n\\n    function localDomain() external view returns (uint32);\\n\\n    function delivered(bytes32 messageId) external view returns (bool);\\n\\n    function defaultIsm() external view returns (IInterchainSecurityModule);\\n\\n    function defaultHook() external view returns (IPostDispatchHook);\\n\\n    function requiredHook() external view returns (IPostDispatchHook);\\n\\n    function latestDispatchedId() external view returns (bytes32);\\n\\n    function dispatch(\\n        uint32 destinationDomain,\\n        bytes32 recipientAddress,\\n        bytes calldata messageBody\\n    ) external payable returns (bytes32 messageId);\\n\\n    function quoteDispatch(\\n        uint32 destinationDomain,\\n        bytes32 recipientAddress,\\n        bytes calldata messageBody\\n    ) external view returns (uint256 fee);\\n\\n    function dispatch(\\n        uint32 destinationDomain,\\n        bytes32 recipientAddress,\\n        bytes calldata body,\\n        bytes calldata defaultHookMetadata\\n    ) external payable returns (bytes32 messageId);\\n\\n    function quoteDispatch(\\n        uint32 destinationDomain,\\n        bytes32 recipientAddress,\\n        bytes calldata messageBody,\\n        bytes calldata defaultHookMetadata\\n    ) external view returns (uint256 fee);\\n\\n    function dispatch(\\n        uint32 destinationDomain,\\n        bytes32 recipientAddress,\\n        bytes calldata body,\\n        bytes calldata customHookMetadata,\\n        IPostDispatchHook customHook\\n    ) external payable returns (bytes32 messageId);\\n\\n    function quoteDispatch(\\n        uint32 destinationDomain,\\n        bytes32 recipientAddress,\\n        bytes calldata messageBody,\\n        bytes calldata customHookMetadata,\\n        IPostDispatchHook customHook\\n    ) external view returns (uint256 fee);\\n\\n    function process(\\n        bytes calldata metadata,\\n        bytes calldata message\\n    ) external payable;\\n\\n    function recipientIsm(\\n        address recipient\\n    ) external view returns (IInterchainSecurityModule module);\\n}\\n\",\"keccak256\":\"0x9cd728ba304279775818f8c7b4c02f8c5dd2b28e051ec466dbe36129be01a6ee\",\"license\":\"MIT OR Apache-2.0\"},\"@hyperlane-xyz/core/contracts/interfaces/hooks/IPostDispatchHook.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.8.0;\\n\\n/*@@@@@@@       @@@@@@@@@\\n @@@@@@@@@       @@@@@@@@@\\n  @@@@@@@@@       @@@@@@@@@\\n   @@@@@@@@@       @@@@@@@@@\\n    @@@@@@@@@@@@@@@@@@@@@@@@@\\n     @@@@@  HYPERLANE  @@@@@@@\\n    @@@@@@@@@@@@@@@@@@@@@@@@@\\n   @@@@@@@@@       @@@@@@@@@\\n  @@@@@@@@@       @@@@@@@@@\\n @@@@@@@@@       @@@@@@@@@\\n@@@@@@@@@       @@@@@@@@*/\\n\\ninterface IPostDispatchHook {\\n    enum Types {\\n        UNUSED,\\n        ROUTING,\\n        AGGREGATION,\\n        MERKLE_TREE,\\n        INTERCHAIN_GAS_PAYMASTER,\\n        FALLBACK_ROUTING,\\n        ID_AUTH_ISM,\\n        PAUSABLE,\\n        PROTOCOL_FEE,\\n        LAYER_ZERO_V1\\n    }\\n\\n    /**\\n     * @notice Returns an enum that represents the type of hook\\n     */\\n    function hookType() external view returns (uint8);\\n\\n    /**\\n     * @notice Returns whether the hook supports metadata\\n     * @param metadata metadata\\n     * @return Whether the hook supports metadata\\n     */\\n    function supportsMetadata(\\n        bytes calldata metadata\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Post action after a message is dispatched via the Mailbox\\n     * @param metadata The metadata required for the hook\\n     * @param message The message passed from the Mailbox.dispatch() call\\n     */\\n    function postDispatch(\\n        bytes calldata metadata,\\n        bytes calldata message\\n    ) external payable;\\n\\n    /**\\n     * @notice Compute the payment required by the postDispatch call\\n     * @param metadata The metadata required for the hook\\n     * @param message The message passed from the Mailbox.dispatch() call\\n     * @return Quoted payment for the postDispatch call\\n     */\\n    function quoteDispatch(\\n        bytes calldata metadata,\\n        bytes calldata message\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x29201c5597a02b691be7815554a9a2815198bb8b76b061c1f4f6daf77d5d1d75\",\"license\":\"MIT OR Apache-2.0\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/ETFLock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC721 } from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { ISimpleERC20 } from \\\"./SimpleERC20.sol\\\";\\nimport \\\"@hyperlane-xyz/core/contracts/interfaces/IMailbox.sol\\\";\\nimport { IInterchainSecurityModule } from \\\"@hyperlane-xyz/core/contracts/interfaces/IInterchainSecurityModule.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n// import \\\"@redstone-finance/evm-connector/contracts/data-services/RapidDemoConsumerBase.sol\\\";\\nimport {IQuasar} from \\\"./Quasar.sol\\\";\\n\\nstruct TokenQuantity {\\n\\taddress _address;\\n\\tuint256 _quantity;\\n\\tuint32 _chainId;\\n\\taddress _contributor;\\n\\tuint64 _tokenId;\\n}\\n\\nstruct Vault {\\n\\tTokenQuantity[] _tokens;\\n\\tVaultState state;\\n}\\n\\nenum VaultState {\\n\\tEMPTY,\\n\\tOPEN,\\n\\tMINTED,\\n\\tBURNED\\n}\\n\\nstruct EventInfo {\\n\\taddress sender;\\n\\tuint256 quantity;\\n\\tuint32 chainId;\\n\\taddress contributor;\\n}\\n\\nstruct DepositInfo {\\n\\tuint256 vaultId;\\n\\tTokenQuantity[] tokens;\\n}\\n\\ncontract ETFLock {\\n\\taddress public sideChainLock;\\n\\tuint32 public sideChainId;\\n\\tTokenQuantity[] public requiredTokens;\\n\\tmapping(address => TokenQuantity) public addressToToken;\\n\\tuint32 public chainId;\\n\\tuint32 public mainChainId;\\n\\n\\taddress quasarAddress;\\n\\n\\tuint32[] public receivedMessages;\\n\\n\\t// Siechain params\\n\\taddress public mainChainLock;\\n\\tIMailbox outbox;\\n\\tIInterchainSecurityModule securityModule;\\n\\n\\t// Mainchain params\\n\\taddress public etfToken;\\n\\tuint256 public etfTokenPerVault;\\n\\n\\tmapping(uint256 => address[]) contributorsByVault;\\n\\tmapping(uint256 => mapping(address => uint256))\\n\\t\\tpublic accountContributionsPerVault;\\n\\n\\tevent Deposit(\\n\\t\\tuint256 _vaultId,\\n\\t\\taddress _address,\\n\\t\\tuint256 _quantity,\\n\\t\\tuint32 _chainId,\\n\\t\\taddress _contributor\\n\\t);\\n\\n\\tmapping(uint256 => Vault) public vaults;\\n\\n\\tconstructor(\\n\\t\\tuint32 _mainChain,\\n\\t\\tuint32 _chainId,\\n\\t\\tTokenQuantity[] memory _requiredTokens,\\n\\t\\taddress _etfToken,\\n\\t\\tuint256 _etfTokenPerVault\\n\\t) {\\n\\t\\tmainChainId = _mainChain;\\n\\t\\tchainId = _chainId;\\n\\t\\tetfToken = _etfToken;\\n\\t\\tetfTokenPerVault = _etfTokenPerVault;\\n\\t\\tfor (uint256 i = 0; i < _requiredTokens.length; i++) {\\n\\t\\t\\trequiredTokens.push(_requiredTokens[i]);\\n\\t\\t\\taddressToToken[_requiredTokens[i]._address] = _requiredTokens[i];\\n\\t\\t}\\n\\t}\\n\\n\\tfunction setSideChainParams(\\n\\t\\taddress _mainChainLock,\\n\\t\\taddress _outbox,\\n\\t\\taddress _securityModule\\n\\t) public {\\n\\t\\trequire(\\n\\t\\t\\t!isMainChain(),\\n\\t\\t\\t\\\"Main chain lock address cannot be set on main chain\\\"\\n\\t\\t);\\n\\t\\tmainChainLock = _mainChainLock;\\n\\t\\toutbox = IMailbox(_outbox);\\n\\t\\tsecurityModule = IInterchainSecurityModule(_securityModule);\\n\\t}\\n\\n\\tfunction setMainChainParams(\\n\\t\\taddress _sideChainLock,\\n\\t\\tuint32 _sideChainId,\\n\\t\\taddress _outbox,\\n\\t\\taddress _securityModule,\\n\\t\\taddress _quasarAddress\\n\\t) public {\\n\\t\\trequire(\\n\\t\\t\\tisMainChain(),\\n\\t\\t\\t\\\"Side Chain lock address can only be set mainchain\\\"\\n\\t\\t);\\n\\t\\toutbox = IMailbox(_outbox);\\n\\t\\tsideChainId = _sideChainId;\\n\\t\\tsecurityModule = IInterchainSecurityModule(_securityModule);\\n\\t\\tsideChainLock = _sideChainLock;\\n\\t\\tquasarAddress = _quasarAddress;\\n\\t}\\n\\n\\tfunction getVaultStates() public view returns (VaultState[] memory) {\\n\\t\\tVaultState[] memory states = new VaultState[](90);\\n\\t\\tfor (uint256 i = 0; i < states.length; i++) {\\n\\t\\t\\tstates[i] = vaults[i].state;\\n\\t\\t}\\n\\t\\treturn states;\\n\\t}\\n\\n\\tfunction getVault(uint256 _vaultId) public view returns (Vault memory) {\\n\\t\\treturn vaults[_vaultId];\\n\\t}\\n\\n\\tfunction getRequiredTokens() public view returns (TokenQuantity[] memory) {\\n\\t\\treturn requiredTokens;\\n\\t}\\n\\n\\tfunction setVaultState(uint256 _vaultId, VaultState _state) public {\\n\\t\\tvaults[_vaultId].state = _state;\\n\\t}\\n\\n\\tfunction isMainChain() public view returns (bool) {\\n\\t\\treturn chainId == mainChainId;\\n\\t}\\n\\n\\n\\tfunction getIndexForDepositInfo(TokenQuantity memory _tokenQuantity) public view returns (uint256) {\\n\\t\\t// return the index of the token in the requiredTokens array\\n\\t\\tfor (uint256 i = 0; i < requiredTokens.length; i++) {\\n\\t\\t\\tif (requiredTokens[i]._address == _tokenQuantity._address) {\\n\\t\\t\\t\\treturn i;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn 0;\\n\\t}\\n\\n\\tfunction _deposit(\\n\\t\\tDepositInfo memory _depositInfo,\\n\\t\\tuint32 _chainId\\n\\t) internal {\\n\\t\\tuint256 _vaultId = _depositInfo.vaultId;\\n\\t\\tTokenQuantity[] memory _tokens = _depositInfo.tokens;\\n\\t\\trequire(\\n\\t\\t\\tvaults[_vaultId].state == VaultState.OPEN ||\\n\\t\\t\\t\\tvaults[_vaultId].state == VaultState.EMPTY,\\n\\t\\t\\t\\\"Vault is not open or empty\\\"\\n\\t\\t);\\n\\n\\t\\trequire(_chainId == chainId, \\\"ChainId does not match the contract chainId\\\");\\n\\n\\t\\tif (vaults[_vaultId].state == VaultState.EMPTY) {\\n\\t\\t\\tfor (uint256 i = 0; i < requiredTokens.length; i++) {\\n\\t\\t\\t\\tvaults[_vaultId]._tokens.push(\\n\\t\\t\\t\\t\\tTokenQuantity(\\n\\t\\t\\t\\t\\t\\trequiredTokens[i]._address,\\n\\t\\t\\t\\t\\t\\t0,\\n\\t\\t\\t\\t\\t\\trequiredTokens[i]._chainId,\\n\\t\\t\\t\\t\\t\\taddress(0),\\n\\t\\t\\t\\t\\t\\trequiredTokens[i]._tokenId\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t\\tvaults[_vaultId].state = VaultState.OPEN;\\n\\t\\t}\\n\\n\\t\\tfor (uint256 i = 0; i < _tokens.length; i++) {\\n\\t\\t\\tif (_tokens[i]._chainId != _chainId) {\\n\\t\\t\\t\\trevert(\\n\\t\\t\\t\\t\\t\\\"Token chainId does not match the chainId of the contract\\\"\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t\\tif (\\n\\t\\t\\t\\t_tokens[i]._quantity + vaults[_vaultId]._tokens[i]._quantity >\\n\\t\\t\\t\\taddressToToken[_tokens[i]._address]._quantity\\n\\t\\t\\t) {\\n\\t\\t\\t\\trevert(\\\"Token quantity exceeds the required amount\\\");\\n\\t\\t\\t}\\n\\n\\n\\t\\t\\tuint256 index = getIndexForDepositInfo(_tokens[i]);\\n\\n\\t\\t\\tif (_tokens[i]._chainId == _chainId) {\\n\\t\\t\\t\\tIERC20(_tokens[i]._address).transferFrom(\\n\\t\\t\\t\\t\\t_tokens[i]._contributor,\\n\\t\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\t\\t_tokens[i]._quantity\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\n\\t\\t\\t\\n\\t\\t\\tvaults[_vaultId]._tokens[index]._quantity += _tokens[i]._quantity;\\n\\n\\t\\t\\temit Deposit(\\n\\t\\t\\t\\t_vaultId,\\n\\t\\t\\t\\t_tokens[i]._address,\\n\\t\\t\\t\\t_tokens[i]._quantity,\\n\\t\\t\\t\\t_tokens[i]._chainId,\\n\\t\\t\\t\\t_tokens[i]._contributor\\n\\t\\t\\t);\\n\\n\\t\\t\\tif (isMainChain()) {\\n\\t\\t\\t\\tif (accountContributionsPerVault[_vaultId][_tokens[i]._contributor] == 0) {\\n\\t\\t\\t\\t\\tcontributorsByVault[_vaultId].push(_tokens[i]._contributor);\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t// bytes32[] memory dataFeedIds = new bytes32[](6);\\n\\t\\t\\t\\t// dataFeedIds[0] = bytes32(\\\"BNB\\\");\\n\\t\\t\\t\\t// uint256[] memory prices = \\n\\n\\t\\t\\t\\t// uint256 price = prices[0];\\n\\n\\t\\t\\t\\tuint256 price = 1;\\n\\n\\t\\t\\t\\t//  CHAINLINK INTERFACE\\n\\t\\t\\t\\t// uint256 price = AggregatorV3Interface(_tokens[i]._aggregator).latestRoundData().answer;\\n\\n\\t\\t\\t\\t// Quasar Interface\\n\\t\\t\\t\\t// uint256 price = IQuasar(quasarAddress).getPrice(_tokens[i]._tokenId);\\n\\n\\t\\t\\t\\t// (, /* uint80 roundID */ int answer, , , ) = AggregatorV3Interface(\\n\\t\\t\\t\\t// \\t_tokens[i]._aggregator\\n\\t\\t\\t\\t// ).latestRoundData();\\n\\n\\t\\t\\t\\taccountContributionsPerVault[_vaultId][_tokens[i]._contributor] += _tokens[i]\\n\\t\\t\\t\\t\\t._quantity * price;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tfor (uint256 i = 0; i < requiredTokens.length; i++) {\\n\\t\\t\\tif (\\n\\t\\t\\t\\tvaults[_vaultId]._tokens[i]._quantity <\\n\\t\\t\\t\\trequiredTokens[i]._quantity\\n\\t\\t\\t) {\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tvaults[_vaultId].state = VaultState.MINTED;\\n\\n\\t\\tif (isMainChain()) {\\n\\t\\t\\tdistributeShares(_vaultId);\\n\\t\\t} else {\\n\\t\\t\\tnotifyDepositToMainChain(_depositInfo);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction notifyDepositToMainChain(\\n\\t\\tDepositInfo memory _depositInfo\\n\\t) internal {\\n\\t\\tbytes32 mainChainLockBytes32 = addressToBytes32(mainChainLock);\\n\\t\\tuint256 fee = outbox.quoteDispatch(\\n\\t\\t\\tmainChainId,\\n\\t\\t\\tmainChainLockBytes32,\\n\\t\\t\\tabi.encode(_depositInfo)\\n\\t\\t);\\n\\t\\toutbox.dispatch{ value: fee }(\\n\\t\\t\\tmainChainId,\\n\\t\\t\\tmainChainLockBytes32,\\n\\t\\t\\tabi.encode(_depositInfo)\\n\\t\\t);\\n\\t}\\n\\n\\tfunction distributeShares(uint256 _vaultId) internal {\\n\\t\\tuint256 totalContributions = 0;\\n\\t\\tfor (uint256 i = 0; i < contributorsByVault[_vaultId].length; i++) {\\n\\t\\t\\ttotalContributions += accountContributionsPerVault[_vaultId][\\n\\t\\t\\t\\tcontributorsByVault[_vaultId][i]\\n\\t\\t\\t];\\n\\t\\t}\\n\\n\\t\\tfor (uint256 i = 0; i < contributorsByVault[_vaultId].length; i++) {\\n\\t\\t\\tuint256 shares = (accountContributionsPerVault[_vaultId][\\n\\t\\t\\t\\tcontributorsByVault[_vaultId][i]\\n\\t\\t\\t] * etfTokenPerVault) / totalContributions;\\n\\t\\t\\tISimpleERC20(etfToken).mint(\\n\\t\\t\\t\\tcontributorsByVault[_vaultId][i],\\n\\t\\t\\t\\tshares\\n\\t\\t\\t);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction deposit(DepositInfo memory _depositInfo) public payable {\\n\\t\\t_deposit(_depositInfo, chainId);\\n\\t}\\n\\n\\tfunction handle(\\n\\t\\tuint32 _origin,\\n\\t\\tbytes32 _sender,\\n\\t\\tbytes calldata _message\\n\\t) external payable {\\n\\t\\trequire(\\n\\t\\t\\tisMainChain() && bytes32ToAddress(_sender) == sideChainLock,\\n\\t\\t\\t\\\"Sender to mainChain is not the sideChainLock\\\"\\n\\t\\t);\\n\\n\\t\\trequire(\\n\\t\\t\\t!isMainChain() && bytes32ToAddress(_sender) == mainChainLock,\\n\\t\\t\\t\\\"Sender to sideChain is not the mainChainLock\\\"\\n\\t\\t);\\n\\n\\n\\t\\tif(isMainChain()) {\\n\\t\\t\\tDepositInfo memory _depositInfo = abi.decode(_message, (DepositInfo));\\n\\t\\t\\t// uint32 _chainId = _depositInfo.tokens[0]._chainId;\\n\\t\\t\\t_deposit(_depositInfo, chainId);\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\telse {\\n\\t\\t\\tuint256 _vaultId = abi.decode(_message, (uint256));\\n\\t\\t\\tburn(_vaultId);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction burn(uint256 _vaultId) public {\\n\\t\\trequire(\\n\\t\\t\\tvaults[_vaultId].state == VaultState.MINTED,\\n\\t\\t\\t\\\"Vault is not minted\\\"\\n\\t\\t);\\n\\t\\t// require to pay back the etfToken\\n\\t\\trequire(isMainChain(), \\\"Only main chain can burn\\\");\\n\\t\\tISimpleERC20(etfToken).burn(msg.sender, etfTokenPerVault);\\n\\t\\tfor (uint256 j = 0; j < vaults[_vaultId]._tokens.length; j++) {\\n\\t\\t\\tif (vaults[_vaultId]._tokens[j]._chainId == chainId) {\\n\\t\\t\\t\\tIERC20(vaults[_vaultId]._tokens[j]._address).transfer(\\n\\t\\t\\t\\t\\tmsg.sender,\\n\\t\\t\\t\\t\\tvaults[_vaultId]._tokens[j]._quantity\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tvaults[_vaultId].state = VaultState.BURNED;\\n\\n\\t\\t// notify burn to sidechain\\n\\t\\tbytes32 sideChainLockBytes32 = addressToBytes32(sideChainLock);\\n\\t\\tuint256 fee = outbox.quoteDispatch(\\n\\t\\t\\tsideChainId,\\n\\t\\t\\tsideChainLockBytes32,\\n\\t\\t\\tabi.encode(_vaultId)\\n\\t\\t);\\n\\t\\toutbox.dispatch{ value: fee }(\\n\\t\\t\\tsideChainId,\\n\\t\\t\\tsideChainLockBytes32,\\n\\t\\t\\tabi.encode(_vaultId)\\n\\t\\t);\\n\\t}\\n\\n\\tfunction addressToBytes32(address _addr) internal pure returns (bytes32) {\\n\\t\\treturn bytes32(uint256(uint160(_addr)));\\n\\t}\\n\\n\\tfunction bytes32ToAddress(\\n\\t\\tbytes32 _bytes32\\n\\t) internal pure returns (address) {\\n\\t\\treturn address(uint160(uint256(_bytes32)));\\n\\t}\\n}\\n\",\"keccak256\":\"0x3d4c4cbb3903e9ff8952bfe6cd8823b1b459440d67ded7771529c044bf7978b6\",\"license\":\"MIT\"},\"contracts/Quasar.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IQuasar {\\n    function getCurrencyID(string memory symbol) external view returns(uint64, bool);\\n    function getSupportedCurrencies() external view returns(Currency[] memory, bool[] memory);\\n    function getNextID() external view returns (uint64);\\n    function addCurrency(string memory name, string memory symbol) external;\\n    function updateCurrency(uint64 id, string memory name, string memory symbol) external;\\n    function getCurrencyMetadata(uint64 id) external view returns (Currency memory);\\n    function pushPrice(uint64 id, uint256 price) external;\\n    function getPrice(uint64 id) external view returns (uint256);\\n    function changeCurrencyState(uint64 id, bool state) external;\\n    function isCurrencySupported(uint64 id) external view returns (bool);\\n\\n    struct Currency {\\n        string name;\\n        string symbol;\\n    }\\n\\n}\\n\\ncontract Quasar is Ownable {\\n    // Next currency ID\\n    uint64 private _nextID;\\n\\n    // Currency metadata struct\\n    struct Currency {\\n        string name;\\n        string symbol;\\n    }\\n\\n    // Mapping currency ID to currency metadata\\n    mapping(uint64 => Currency) private _currencies;\\n\\n    // Mapping currency ID to currency price\\n    mapping(uint64 => uint256) private _currencyPrices;\\n\\n    // Mapping currency ID to currency state. If true, currency is supported\\n    mapping(uint64 => bool) private _isCurrencySupported;\\n\\n    // Triggered whenever new currency is added\\n    event CurrencyAdded(uint64 indexed id, string name, string symbol);\\n\\n    // Triggered whenever currency metadata is updated\\n    event CurrencyUpdated(uint64 indexed id, string name, string symbol);\\n\\n    // Triggered whenever currency price is updated\\n    event PriceUpdated(uint64 indexed id, uint256 price);\\n\\n    // Triggered whenever currency state is changed\\n    event CurrencyStateChanged(uint64 indexed id, bool state);\\n\\n    constructor() {\\n        _nextID = 1;\\n    }\\n\\n    /*\\n     * Allows to get currency ID\\n     *\\n     * @param symbol - currency symbol\\n     *\\n     * @return currency ID as uint64\\n     * @return is currency active as bool\\n     */\\n    function getCurrencyID(string memory symbol) external view returns(uint64, bool) {\\n        for (uint64 i = 0; i < _nextID; i++) {\\n            if (keccak256(abi.encode(_currencies[i+1].symbol)) == keccak256(abi.encode(symbol))) {\\n                return (i+1, _isCurrencySupported[i+1]);\\n            }\\n        }\\n\\n        return (0, false);\\n    }\\n\\n    /*\\n     * Allows to get all supported currencies\\n     *\\n     * @return currencies as Currency struct array\\n     * @return is currency active statuses as bool array\\n     */\\n    function getSupportedCurrencies() external view returns(Currency[] memory, bool[] memory) {\\n        Currency[] memory currencies = new Currency[](_nextID-1);\\n        bool[] memory isActive = new bool[](_nextID-1);\\n\\n        for (uint64 i = 0; i < _nextID; i++) {\\n            currencies[i] = _currencies[i+1];\\n            isActive[i] = _isCurrencySupported[i+1];\\n        }\\n\\n        return (currencies, isActive);\\n    }\\n\\n    /*\\n     * Allows to get current next ID\\n     *\\n     * @return next currency ID as uint64\\n     */\\n    function getNextID() external view returns (uint64) {\\n        return _nextID;\\n    }\\n\\n    /*\\n     * Allows to add new currency\\n     *\\n     * Requirements:\\n     * - caller should be a contract owner\\n     * - name cannot be blank\\n     * - symbol cannot be blank\\n     *\\n     * @param name - currency name\\n     * @param symbol - currency symbol\\n     *\\n     * @emits `CurrencyAdded` event with ID, name and symbol as arguments\\n     */\\n    function addCurrency(string memory name, string memory symbol) external onlyOwner {\\n        require(bytes(name).length > 0, \\\"Quasar: name cannot be blank\\\");\\n        require(bytes(symbol).length > 0, \\\"Quasar: symbol cannot be blank\\\");\\n\\n        uint64 id = _nextID;\\n\\n        _currencies[id] = Currency(name, symbol);\\n        _nextID++;\\n        _isCurrencySupported[id] = true;\\n\\n        emit CurrencyAdded(id, name, symbol);\\n    }\\n\\n    /*\\n     * Allows to update existing currency\\n     *\\n     * Requirements:\\n     * - caller should be a contract owner\\n     * - currency should exist\\n     * - name cannot be blank\\n     * - symbol cannot be blank\\n     *\\n     * @param id - currency ID\\n     * @param name - currency name\\n     * @param symbol - currency symbol\\n     *\\n     * @emits `CurrencyUpdated` event with ID, name and symbol as arguments\\n     */\\n    function updateCurrency(uint64 id, string memory name, string memory symbol) external onlyOwner {\\n        require(_isCurrencySupported[id], \\\"Quasar: currency should be supported\\\");\\n        require(bytes(name).length > 0, \\\"Quasar: name cannot be blank\\\");\\n        require(bytes(symbol).length > 0, \\\"Quasar: symbol cannot be blank\\\");\\n\\n        _currencies[id].name = name;\\n        _currencies[id].symbol = symbol;\\n\\n        emit CurrencyUpdated(id, name, symbol);\\n    }\\n\\n    /*\\n     * Allows to get currency metadata by given ID\\n     *\\n     * @param id - currency ID\\n     *\\n     * @return currency metadata as Currency struct type\\n     */\\n    function getCurrencyMetadata(uint64 id) external view returns (Currency memory) {\\n        return _currencies[id];\\n    }\\n\\n    /*\\n     * Allows to push price for given currency ID\\n     *\\n     * Requirements:\\n     * - caller should be a contract owner\\n     * - currency should exist\\n     *\\n     * @param id - currency ID\\n     * @param price - currency price\\n     *\\n     * @emit PriceUpdated event with id and price as arguments\\n     */\\n    function pushPrice(uint64 id, uint256 price) external onlyOwner {\\n        require(_isCurrencySupported[id], \\\"Quasar: currency should be supported\\\");\\n\\n        _currencyPrices[id] = price;\\n\\n        emit PriceUpdated(id, price);\\n    }\\n\\n    /*\\n     * Allows to get currency price\\n     *\\n     * @param id - currency ID\\n     *\\n     * @return currency price as uint256\\n     */\\n    function getPrice(uint64 id) external view returns (uint256) {\\n        require(_isCurrencyExists(id), \\\"Quasar: currency does not exist\\\");\\n\\n        return _currencyPrices[id];\\n    }\\n\\n    /*\\n     * Allows to change currency state\\n     *\\n     * Requirements:\\n     * - caller should be a contract owner\\n     * - currency should exist\\n     *\\n     * @param id - currency ID\\n     * @param state - new currency state\\n     *\\n     * @emit CurrencyStateChanged event with id and new state as arguments\\n     */\\n    function changeCurrencyState(uint64 id, bool state) external onlyOwner {\\n        require(_isCurrencyExists(id), \\\"Quasar: currency does not exist\\\");\\n\\n        _isCurrencySupported[id] = state;\\n\\n        emit CurrencyStateChanged(id, state);\\n    }\\n\\n    /*\\n     * Allows to get current currency state\\n     *\\n     * @param id - currency ID\\n     *\\n     * @return currency state as bool\\n     */\\n    function isCurrencySupported(uint64 id) external view returns (bool) {\\n        return _isCurrencySupported[id];\\n    }\\n\\n    // Allows to check if currency exist by given currency ID\\n    function _isCurrencyExists(uint64 id) internal view returns (bool) {\\n        return bytes(_currencies[id].name).length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xd7b10704d014065f17c06760701cc0175ab41538a8760715e4a4d621858b2618\",\"license\":\"UNLICENSED\"},\"contracts/SimpleERC20.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\ninterface ISimpleERC20 is IERC20 {\\n    function mint(address to, uint256 amount) external;\\n    function burn(address sender, uint256 amount) external;\\n}\\n\\ncontract SimpleERC20 is ISimpleERC20, ERC20 {\\n    address public owner = msg.sender;\\n\\n\\tconstructor(\\n\\t\\tstring memory name,\\n\\t\\tstring memory symbol,\\n\\t\\tuint256 initialSupply\\n\\t) ERC20(name, symbol) {\\n\\t\\t_mint(msg.sender, initialSupply);\\n\\t}\\n\\n    function setOwner(address _owner) public {\\n        require(msg.sender == owner, \\\"SimpleERC20: only owner can change owner\\\");\\n        owner = _owner;\\n    }\\n\\n    function mint(address to, uint256 amount) public {\\n        require(msg.sender == owner, \\\"SimpleERC20: only owner can mint\\\");\\n        _mint(to, amount);\\n    }\\n\\n    function burn(address sender, uint256 amount) public {\\n        _burn(sender, amount);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x5d632df58d4e850f3839837f249583f7e630984d84dce6516df2c41e78239596\",\"license\":\"UNLICENSED\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002826380380620028268339810160408190526200003491620002f4565b600380546001600160401b03191664010000000063ffffffff8881169190910263ffffffff191691909117908616179055600880546001600160a01b0319166001600160a01b038416179055600981905560005b835181101562000242576001848281518110620000a957620000a96200045d565b602090810291909101810151825460018181018555600094855293839020825160039092020180546001600160a01b039283166001600160a01b0319909116178155928201519383019390935560408101516002909201805460608301516080909301516001600160401b0316600160c01b026001600160c01b0393909516640100000000026001600160c01b031990911663ffffffff90941693909317929092171691909117905583518490829081106200016957620001696200045d565b6020026020010151600260008684815181106200018a576200018a6200045d565b602090810291909101810151516001600160a01b039081168352828201939093526040918201600020845181549085166001600160a01b0319909116178155908401516001820155908301516002909101805460608501516080909501516001600160401b0316600160c01b026001600160c01b0395909416640100000000026001600160c01b031990911663ffffffff90931692909217919091179290921617905580620002398162000473565b91505062000088565b5050505050506200049b565b805163ffffffff811681146200026357600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b0381118282101715620002a357620002a362000268565b60405290565b604051601f8201601f191681016001600160401b0381118282101715620002d457620002d462000268565b604052919050565b80516001600160a01b03811681146200026357600080fd5b600080600080600060a086880312156200030d57600080fd5b62000318866200024e565b94506020620003298188016200024e565b604088810151919650906001600160401b03808211156200034957600080fd5b818a0191508a601f8301126200035e57600080fd5b81518181111562000373576200037362000268565b62000383858260051b01620002a9565b81815260a09091028301850190858101908d831115620003a257600080fd5b938601935b82851015620004325760a0858f031215620003c25760008081fd5b620003cc6200027e565b620003d786620002dc565b81528786015188820152620003ee8787016200024e565b87820152606062000401818801620002dc565b9082015260808681015186811681146200041b5760008081fd5b90820152825260a0949094019390860190620003a7565b809950505050505050506200044a60608701620002dc565b9150608086015190509295509295909350565b634e487b7160e01b600052603260045260246000fd5b6000600182016200049457634e487b7160e01b600052601160045260246000fd5b5060010190565b61237b80620004ab6000396000f3fe6080604052600436106101405760003560e01c80638c64ea4a116100b6578063a0d6803c1161006f578063a0d6803c14610471578063b834f6fb14610484578063b98ee2b6146104b6578063cca3ce2b146104d6578063d030366c146104f8578063eb6a9aa01461051857600080fd5b80638c64ea4a146103835780639403b634146103c3578063956a45a6146103f05780639a8a0592146104105780639a9176c21461042d5780639c58a5a41461045157600080fd5b8063309bfe4a11610108578063309bfe4a1461022157806342966c68146102435780634d8739ee1461026357806356d5d4751461028357806369abaac9146102965780636b8cf65e1461034b57600080fd5b8063014372eb146101455780630badce41146101905780630f45ad43146101b257806318a9b4ad146101eb578063250cab391461020b575b600080fd5b34801561015157600080fd5b5061017d610160366004611c9b565b600b60209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b34801561019c57600080fd5b506101b06101ab366004611cc7565b610538565b005b3480156101be57600080fd5b506003546101d690600160201b900463ffffffff1681565b60405163ffffffff9091168152602001610187565b3480156101f757600080fd5b5061017d610206366004611e16565b610571565b34801561021757600080fd5b5061017d60095481565b34801561022d57600080fd5b506102366105e0565b6040516101879190611e71565b34801561024f57600080fd5b506101b061025e366004611ebc565b610688565b34801561026f57600080fd5b506101b061027e366004611ed5565b610a90565b6101b0610291366004611f3a565b610b94565b3480156102a257600080fd5b506103016102b1366004611fc1565b60026020819052600091825260409091208054600182015491909201546001600160a01b039283169263ffffffff821691600160201b810490911690600160c01b900467ffffffffffffffff1685565b604080516001600160a01b039687168152602081019590955263ffffffff9093169284019290925292909216606082015267ffffffffffffffff909116608082015260a001610187565b34801561035757600080fd5b5060055461036b906001600160a01b031681565b6040516001600160a01b039091168152602001610187565b34801561038f57600080fd5b506103b661039e366004611ebc565b600c6020526000908152604090206001015460ff1681565b6040516101879190611fdc565b3480156103cf57600080fd5b506103e36103de366004611ebc565b610d22565b6040516101879190612073565b3480156103fc57600080fd5b5061030161040b366004611ebc565b610e2d565b34801561041c57600080fd5b506003546101d69063ffffffff1681565b34801561043957600080fd5b506000546101d690600160a01b900463ffffffff1681565b34801561045d57600080fd5b5060005461036b906001600160a01b031681565b6101b061047f3660046120ab565b610e8c565b34801561049057600080fd5b50600354600160201b810463ffffffff9081169116146040519015158152602001610187565b3480156104c257600080fd5b506101b06104d1366004612193565b610ea3565b3480156104e257600080fd5b506104eb610f5e565b60405161018791906121d6565b34801561050457600080fd5b506101d6610513366004611ebc565b61100d565b34801561052457600080fd5b5060085461036b906001600160a01b031681565b6000828152600c6020526040902060019081018054839260ff199091169083600381111561056857610568611e39565b02179055505050565b6000805b6001548110156105d75782600001516001600160a01b0316600182815481106105a0576105a06121e9565b60009182526020909120600390910201546001600160a01b0316036105c55792915050565b806105cf81612215565b915050610575565b50600092915050565b60408051605a808252610b6082019092526060916000919060208201610b408036833701905050905060005b8151811015610682576000818152600c6020526040902060010154825160ff90911690839083908110610641576106416121e9565b6020026020010190600381111561065a5761065a611e39565b9081600381111561066d5761066d611e39565b9052508061067a81612215565b91505061060c565b50919050565b60026000828152600c602052604090206001015460ff1660038111156106b0576106b0611e39565b146106f85760405162461bcd60e51b815260206004820152601360248201527215985d5b1d081a5cc81b9bdd081b5a5b9d1959606a1b60448201526064015b60405180910390fd5b600354600160201b810463ffffffff9081169116146107595760405162461bcd60e51b815260206004820152601860248201527f4f6e6c79206d61696e20636861696e2063616e206275726e000000000000000060448201526064016106ef565b600854600954604051632770a7eb60e21b815233600482015260248101919091526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b1580156107a957600080fd5b505af11580156107bd573d6000803e3d6000fd5b5050505060005b6000828152600c6020526040902054811015610922576003546000838152600c60205260409020805463ffffffff9092169183908110610806576108066121e9565b600091825260209091206002600390920201015463ffffffff1603610910576000828152600c60205260409020805482908110610845576108456121e9565b60009182526020808320600390920290910154848352600c909152604090912080546001600160a01b039092169163a9059cbb9133918590811061088b5761088b6121e9565b60009182526020909120600160039092020101546040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156108ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090e919061222e565b505b8061091a81612215565b9150506107c4565b506000818152600c60209081526040808320600101805460ff1916600317905582546006548251808501879052835180820390950185528084019384905263138857a360e31b9093526001600160a01b038083169594911692639c42bd189261099f92600160a01b90910463ffffffff1691879190604401612250565b602060405180830381865afa1580156109bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e091906122b3565b60065460005460408051602081018890529394506001600160a01b039092169263fa31de01928592600160a01b900463ffffffff16918791015b6040516020818303038152906040526040518563ffffffff1660e01b8152600401610a4793929190612250565b60206040518083038185885af1158015610a65573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610a8a91906122b3565b50505050565b600354600160201b810463ffffffff908116911614610b0b5760405162461bcd60e51b815260206004820152603160248201527f5369646520436861696e206c6f636b20616464726573732063616e206f6e6c796044820152701031329039b2ba1036b0b4b731b430b4b760791b60648201526084016106ef565b600680546001600160a01b039485166001600160a01b03199182161790915560008054600780549587169584169590951790945595841663ffffffff909516600160a01b02166001600160c01b031990921691909117929092179092556003805491909216680100000000000000000268010000000000000000600160e01b0319909116179055565b600354600160201b810463ffffffff9081169116148015610bc857506000546001600160a01b0316836001600160a01b0316145b610c295760405162461bcd60e51b815260206004820152602c60248201527f53656e64657220746f206d61696e436861696e206973206e6f7420746865207360448201526b696465436861696e4c6f636b60a01b60648201526084016106ef565b600354600160201b810463ffffffff908116911614158015610c5e57506005546001600160a01b0316836001600160a01b0316145b610cbf5760405162461bcd60e51b815260206004820152602c60248201527f53656e64657220746f2073696465436861696e206973206e6f7420746865206d60448201526b61696e436861696e4c6f636b60a01b60648201526084016106ef565b60035463ffffffff600160201b82048116911603610d02576000610ce5828401846120ab565b600354909150610cfc90829063ffffffff16611047565b50610a8a565b6000610d1082840184611ebc565b9050610d1b81610688565b5050505050565b6040805180820190915260608152600060208201526000828152600c60209081526040808320815181546060948102820185018452928101838152909491938593919285929185015b82821015610ded5760008481526020908190206040805160a0810182526003860290920180546001600160a01b0390811684526001808301548587015260029092015463ffffffff811693850193909352600160201b8304166060840152600160c01b90910467ffffffffffffffff1660808301529083529092019101610d6b565b50505090825250600182015460209091019060ff166003811115610e1357610e13611e39565b6003811115610e2457610e24611e39565b90525092915050565b60018181548110610e3d57600080fd5b60009182526020909120600390910201805460018201546002909201546001600160a01b03918216935063ffffffff811691600160201b82041690600160c01b900467ffffffffffffffff1685565b600354610ea090829063ffffffff16611047565b50565b60035463ffffffff600160201b82048116911603610f1f5760405162461bcd60e51b815260206004820152603360248201527f4d61696e20636861696e206c6f636b20616464726573732063616e6e6f742062604482015272329039b2ba1037b71036b0b4b71031b430b4b760691b60648201526084016106ef565b600580546001600160a01b039485166001600160a01b031991821617909155600680549385169382169390931790925560078054919093169116179055565b60606001805480602002602001604051908101604052809291908181526020016000905b828210156110045760008481526020908190206040805160a0810182526003860290920180546001600160a01b0390811684526001808301548587015260029092015463ffffffff811693850193909352600160201b8304166060840152600160c01b90910467ffffffffffffffff1660808301529083529092019101610f82565b50505050905090565b6004818154811061101d57600080fd5b9060005260206000209060089182820401919006600402915054906101000a900463ffffffff1681565b8151602083015160016000838152600c602052604090206001015460ff16600381111561107657611076611e39565b14806110a557506000828152600c602052604081206001015460ff1660038111156110a3576110a3611e39565b145b6110f15760405162461bcd60e51b815260206004820152601a60248201527f5661756c74206973206e6f74206f70656e206f7220656d70747900000000000060448201526064016106ef565b60035463ffffffff84811691161461115f5760405162461bcd60e51b815260206004820152602b60248201527f436861696e496420646f6573206e6f74206d617463682074686520636f6e747260448201526a1858dd0818da185a5b925960aa1b60648201526084016106ef565b6000828152600c602052604081206001015460ff16600381111561118557611185611e39565b0361132e5760005b60015481101561130e57600c60008481526020019081526020016000206000016040518060a00160405280600184815481106111cb576111cb6121e9565b600091825260208083206003909202909101546001600160a01b031683528201526001805460409092019185908110611206576112066121e9565b600091825260208083206002600390930201919091015463ffffffff1683528201526001805460409092019185908110611242576112426121e9565b60009182526020808320600392830201600290810154600160c01b9081900467ffffffffffffffff908116909652875460018082018a559886529483902087519590940290930180546001600160a01b0319166001600160a01b039586161781559186015196820196909655604085015195018054606086015160809096015163ffffffff9097166001600160c01b031990911617600160201b9590931694909402919091176001600160c01b031693909116029190911790558061130681612215565b91505061118d565b506000828152600c602052604090206001908101805460ff191690911790555b60005b81518110156118e7578363ffffffff16828281518110611353576113536121e9565b60200260200101516040015163ffffffff16146113d85760405162461bcd60e51b815260206004820152603860248201527f546f6b656e20636861696e496420646f6573206e6f74206d617463682074686560448201527f20636861696e4964206f662074686520636f6e7472616374000000000000000060648201526084016106ef565b600260008383815181106113ee576113ee6121e9565b6020026020010151600001516001600160a01b03166001600160a01b0316815260200190815260200160002060010154600c60008581526020019081526020016000206000018281548110611445576114456121e9565b906000526020600020906003020160010154838381518110611469576114696121e9565b60200260200101516020015161147f91906122cc565b11156114e05760405162461bcd60e51b815260206004820152602a60248201527f546f6b656e207175616e746974792065786365656473207468652072657175696044820152691c995908185b5bdd5b9d60b21b60648201526084016106ef565b60006115048383815181106114f7576114f76121e9565b6020026020010151610571565b90508463ffffffff1683838151811061151f5761151f6121e9565b60200260200101516040015163ffffffff160361161b57828281518110611548576115486121e9565b6020026020010151600001516001600160a01b03166323b872dd848481518110611574576115746121e9565b60200260200101516060015130868681518110611593576115936121e9565b60209081029190910181015101516040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af11580156115f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611619919061222e565b505b82828151811061162d5761162d6121e9565b602002602001015160200151600c60008681526020019081526020016000206000018281548110611660576116606121e9565b9060005260206000209060030201600101600082825461168091906122cc565b925050819055507f80590f9d7015c327349ea64242fc29353801fcad956721a0e45f725338db06f4848484815181106116bb576116bb6121e9565b6020026020010151600001518585815181106116d9576116d96121e9565b6020026020010151602001518686815181106116f7576116f76121e9565b602002602001015160400151878781518110611715576117156121e9565b60200260200101516060015160405161175f9594939291909485526001600160a01b039384166020860152604085019290925263ffffffff16606084015216608082015260a00190565b60405180910390a160035463ffffffff600160201b820481169116036118d457600b600085815260200190815260200160002060008484815181106117a6576117a66121e9565b6020026020010151606001516001600160a01b03166001600160a01b031681526020019081526020016000205460000361183c576000848152600a6020526040902083518490849081106117fc576117fc6121e9565b6020908102919091018101516060015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b039092169190911790555b60006001905080848481518110611855576118556121e9565b60200260200101516020015161186b91906122df565b600b60008781526020019081526020016000206000868681518110611892576118926121e9565b6020026020010151606001516001600160a01b03166001600160a01b0316815260200190815260200160002060008282546118cd91906122cc565b9091555050505b50806118df81612215565b915050611331565b5060005b6001548110156119725760018181548110611908576119086121e9565b906000526020600020906003020160010154600c60008581526020019081526020016000206000018281548110611941576119416121e9565b9060005260206000209060030201600101541015611960575050505050565b8061196a81612215565b9150506118eb565b506000828152600c60205260409020600101805460ff1916600217905560035463ffffffff808216600160201b90920416036119b6576119b1826119bf565b610a8a565b610a8a84611b90565b6000805b6000838152600a6020526040902054811015611a49576000838152600b60209081526040808320600a9092528220805491929184908110611a0657611a066121e9565b60009182526020808320909101546001600160a01b03168352820192909252604001902054611a3590836122cc565b915080611a4181612215565b9150506119c3565b5060005b6000838152600a6020526040902054811015611b8b576009546000848152600b60209081526040808320600a9092528220805492938693909291859187908110611a9957611a996121e9565b60009182526020808320909101546001600160a01b03168352820192909252604001902054611ac891906122df565b611ad291906122f6565b6008546000868152600a6020526040902080549293506001600160a01b03909116916340c10f19919085908110611b0b57611b0b6121e9565b60009182526020909120015460405160e083901b6001600160e01b03191681526001600160a01b03909116600482015260248101849052604401600060405180830381600087803b158015611b5f57600080fd5b505af1158015611b73573d6000803e3d6000fd5b50505050508080611b8390612215565b915050611a4d565b505050565b6005546006546003546040516001600160a01b03938416936000931691639c42bd1891600160201b90910463ffffffff16908590611bd2908890602001612318565b6040516020818303038152906040526040518463ffffffff1660e01b8152600401611bff93929190612250565b602060405180830381865afa158015611c1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4091906122b3565b6006546003546040519293506001600160a01b039091169163fa31de01918491600160201b90910463ffffffff16908690610a1a908990602001612318565b80356001600160a01b0381168114611c9657600080fd5b919050565b60008060408385031215611cae57600080fd5b82359150611cbe60208401611c7f565b90509250929050565b60008060408385031215611cda57600080fd5b82359150602083013560048110611cf057600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715611d3457611d34611cfb565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611d6357611d63611cfb565b604052919050565b803563ffffffff81168114611c9657600080fd5b600060a08284031215611d9157600080fd5b60405160a0810167ffffffffffffffff8282108183111715611db557611db5611cfb565b81604052829350611dc585611c7f565b835260208501356020840152611ddd60408601611d6b565b6040840152611dee60608601611c7f565b6060840152608085013591508082168214611e0857600080fd5b506080919091015292915050565b600060a08284031215611e2857600080fd5b611e328383611d7f565b9392505050565b634e487b7160e01b600052602160045260246000fd5b60048110611e6d57634e487b7160e01b600052602160045260246000fd5b9052565b6020808252825182820181905260009190848201906040850190845b81811015611eb057611ea0838551611e4f565b9284019291840191600101611e8d565b50909695505050505050565b600060208284031215611ece57600080fd5b5035919050565b600080600080600060a08688031215611eed57600080fd5b611ef686611c7f565b9450611f0460208701611d6b565b9350611f1260408701611c7f565b9250611f2060608701611c7f565b9150611f2e60808701611c7f565b90509295509295909350565b60008060008060608587031215611f5057600080fd5b611f5985611d6b565b935060208501359250604085013567ffffffffffffffff80821115611f7d57600080fd5b818701915087601f830112611f9157600080fd5b813581811115611fa057600080fd5b886020828501011115611fb257600080fd5b95989497505060200194505050565b600060208284031215611fd357600080fd5b611e3282611c7f565b60208101611fea8284611e4f565b92915050565b600081518084526020808501945080840160005b8381101561206857815180516001600160a01b03908116895284820151858a015260408083015163ffffffff16908a01526060808301519091169089015260809081015167ffffffffffffffff169088015260a09096019590820190600101612004565b509495945050505050565b60208152600082516040602084015261208f6060840182611ff0565b905060208401516120a36040850182611e4f565b509392505050565b600060208083850312156120be57600080fd5b823567ffffffffffffffff808211156120d657600080fd5b90840190604082870312156120ea57600080fd5b6120f2611d11565b82358152838301358281111561210757600080fd5b80840193505086601f84011261211c57600080fd5b82358281111561212e5761212e611cfb565b61213c858260051b01611d3a565b818152858101935060a091820285018601918983111561215b57600080fd5b948601945b82861015612181576121728a87611d7f565b85529485019493860193612160565b50948201949094529695505050505050565b6000806000606084860312156121a857600080fd5b6121b184611c7f565b92506121bf60208501611c7f565b91506121cd60408501611c7f565b90509250925092565b602081526000611e326020830184611ff0565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612227576122276121ff565b5060010190565b60006020828403121561224057600080fd5b81518015158114611e3257600080fd5b63ffffffff8416815260006020848184015260606040840152835180606085015260005b8181101561229057858101830151858201608001528201612274565b506000608082860101526080601f19601f83011685010192505050949350505050565b6000602082840312156122c557600080fd5b5051919050565b80820180821115611fea57611fea6121ff565b8082028115828204841417611fea57611fea6121ff565b60008261231357634e487b7160e01b600052601260045260246000fd5b500490565b60208152815160208201526000602083015160408084015261233d6060840182611ff0565b94935050505056fea26469706673582212200491d1ac448b9e29bbc129b40c10745f5421eeace0118237050eeee87f91497e64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106101405760003560e01c80638c64ea4a116100b6578063a0d6803c1161006f578063a0d6803c14610471578063b834f6fb14610484578063b98ee2b6146104b6578063cca3ce2b146104d6578063d030366c146104f8578063eb6a9aa01461051857600080fd5b80638c64ea4a146103835780639403b634146103c3578063956a45a6146103f05780639a8a0592146104105780639a9176c21461042d5780639c58a5a41461045157600080fd5b8063309bfe4a11610108578063309bfe4a1461022157806342966c68146102435780634d8739ee1461026357806356d5d4751461028357806369abaac9146102965780636b8cf65e1461034b57600080fd5b8063014372eb146101455780630badce41146101905780630f45ad43146101b257806318a9b4ad146101eb578063250cab391461020b575b600080fd5b34801561015157600080fd5b5061017d610160366004611c9b565b600b60209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b34801561019c57600080fd5b506101b06101ab366004611cc7565b610538565b005b3480156101be57600080fd5b506003546101d690600160201b900463ffffffff1681565b60405163ffffffff9091168152602001610187565b3480156101f757600080fd5b5061017d610206366004611e16565b610571565b34801561021757600080fd5b5061017d60095481565b34801561022d57600080fd5b506102366105e0565b6040516101879190611e71565b34801561024f57600080fd5b506101b061025e366004611ebc565b610688565b34801561026f57600080fd5b506101b061027e366004611ed5565b610a90565b6101b0610291366004611f3a565b610b94565b3480156102a257600080fd5b506103016102b1366004611fc1565b60026020819052600091825260409091208054600182015491909201546001600160a01b039283169263ffffffff821691600160201b810490911690600160c01b900467ffffffffffffffff1685565b604080516001600160a01b039687168152602081019590955263ffffffff9093169284019290925292909216606082015267ffffffffffffffff909116608082015260a001610187565b34801561035757600080fd5b5060055461036b906001600160a01b031681565b6040516001600160a01b039091168152602001610187565b34801561038f57600080fd5b506103b661039e366004611ebc565b600c6020526000908152604090206001015460ff1681565b6040516101879190611fdc565b3480156103cf57600080fd5b506103e36103de366004611ebc565b610d22565b6040516101879190612073565b3480156103fc57600080fd5b5061030161040b366004611ebc565b610e2d565b34801561041c57600080fd5b506003546101d69063ffffffff1681565b34801561043957600080fd5b506000546101d690600160a01b900463ffffffff1681565b34801561045d57600080fd5b5060005461036b906001600160a01b031681565b6101b061047f3660046120ab565b610e8c565b34801561049057600080fd5b50600354600160201b810463ffffffff9081169116146040519015158152602001610187565b3480156104c257600080fd5b506101b06104d1366004612193565b610ea3565b3480156104e257600080fd5b506104eb610f5e565b60405161018791906121d6565b34801561050457600080fd5b506101d6610513366004611ebc565b61100d565b34801561052457600080fd5b5060085461036b906001600160a01b031681565b6000828152600c6020526040902060019081018054839260ff199091169083600381111561056857610568611e39565b02179055505050565b6000805b6001548110156105d75782600001516001600160a01b0316600182815481106105a0576105a06121e9565b60009182526020909120600390910201546001600160a01b0316036105c55792915050565b806105cf81612215565b915050610575565b50600092915050565b60408051605a808252610b6082019092526060916000919060208201610b408036833701905050905060005b8151811015610682576000818152600c6020526040902060010154825160ff90911690839083908110610641576106416121e9565b6020026020010190600381111561065a5761065a611e39565b9081600381111561066d5761066d611e39565b9052508061067a81612215565b91505061060c565b50919050565b60026000828152600c602052604090206001015460ff1660038111156106b0576106b0611e39565b146106f85760405162461bcd60e51b815260206004820152601360248201527215985d5b1d081a5cc81b9bdd081b5a5b9d1959606a1b60448201526064015b60405180910390fd5b600354600160201b810463ffffffff9081169116146107595760405162461bcd60e51b815260206004820152601860248201527f4f6e6c79206d61696e20636861696e2063616e206275726e000000000000000060448201526064016106ef565b600854600954604051632770a7eb60e21b815233600482015260248101919091526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b1580156107a957600080fd5b505af11580156107bd573d6000803e3d6000fd5b5050505060005b6000828152600c6020526040902054811015610922576003546000838152600c60205260409020805463ffffffff9092169183908110610806576108066121e9565b600091825260209091206002600390920201015463ffffffff1603610910576000828152600c60205260409020805482908110610845576108456121e9565b60009182526020808320600390920290910154848352600c909152604090912080546001600160a01b039092169163a9059cbb9133918590811061088b5761088b6121e9565b60009182526020909120600160039092020101546040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156108ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090e919061222e565b505b8061091a81612215565b9150506107c4565b506000818152600c60209081526040808320600101805460ff1916600317905582546006548251808501879052835180820390950185528084019384905263138857a360e31b9093526001600160a01b038083169594911692639c42bd189261099f92600160a01b90910463ffffffff1691879190604401612250565b602060405180830381865afa1580156109bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e091906122b3565b60065460005460408051602081018890529394506001600160a01b039092169263fa31de01928592600160a01b900463ffffffff16918791015b6040516020818303038152906040526040518563ffffffff1660e01b8152600401610a4793929190612250565b60206040518083038185885af1158015610a65573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610a8a91906122b3565b50505050565b600354600160201b810463ffffffff908116911614610b0b5760405162461bcd60e51b815260206004820152603160248201527f5369646520436861696e206c6f636b20616464726573732063616e206f6e6c796044820152701031329039b2ba1036b0b4b731b430b4b760791b60648201526084016106ef565b600680546001600160a01b039485166001600160a01b03199182161790915560008054600780549587169584169590951790945595841663ffffffff909516600160a01b02166001600160c01b031990921691909117929092179092556003805491909216680100000000000000000268010000000000000000600160e01b0319909116179055565b600354600160201b810463ffffffff9081169116148015610bc857506000546001600160a01b0316836001600160a01b0316145b610c295760405162461bcd60e51b815260206004820152602c60248201527f53656e64657220746f206d61696e436861696e206973206e6f7420746865207360448201526b696465436861696e4c6f636b60a01b60648201526084016106ef565b600354600160201b810463ffffffff908116911614158015610c5e57506005546001600160a01b0316836001600160a01b0316145b610cbf5760405162461bcd60e51b815260206004820152602c60248201527f53656e64657220746f2073696465436861696e206973206e6f7420746865206d60448201526b61696e436861696e4c6f636b60a01b60648201526084016106ef565b60035463ffffffff600160201b82048116911603610d02576000610ce5828401846120ab565b600354909150610cfc90829063ffffffff16611047565b50610a8a565b6000610d1082840184611ebc565b9050610d1b81610688565b5050505050565b6040805180820190915260608152600060208201526000828152600c60209081526040808320815181546060948102820185018452928101838152909491938593919285929185015b82821015610ded5760008481526020908190206040805160a0810182526003860290920180546001600160a01b0390811684526001808301548587015260029092015463ffffffff811693850193909352600160201b8304166060840152600160c01b90910467ffffffffffffffff1660808301529083529092019101610d6b565b50505090825250600182015460209091019060ff166003811115610e1357610e13611e39565b6003811115610e2457610e24611e39565b90525092915050565b60018181548110610e3d57600080fd5b60009182526020909120600390910201805460018201546002909201546001600160a01b03918216935063ffffffff811691600160201b82041690600160c01b900467ffffffffffffffff1685565b600354610ea090829063ffffffff16611047565b50565b60035463ffffffff600160201b82048116911603610f1f5760405162461bcd60e51b815260206004820152603360248201527f4d61696e20636861696e206c6f636b20616464726573732063616e6e6f742062604482015272329039b2ba1037b71036b0b4b71031b430b4b760691b60648201526084016106ef565b600580546001600160a01b039485166001600160a01b031991821617909155600680549385169382169390931790925560078054919093169116179055565b60606001805480602002602001604051908101604052809291908181526020016000905b828210156110045760008481526020908190206040805160a0810182526003860290920180546001600160a01b0390811684526001808301548587015260029092015463ffffffff811693850193909352600160201b8304166060840152600160c01b90910467ffffffffffffffff1660808301529083529092019101610f82565b50505050905090565b6004818154811061101d57600080fd5b9060005260206000209060089182820401919006600402915054906101000a900463ffffffff1681565b8151602083015160016000838152600c602052604090206001015460ff16600381111561107657611076611e39565b14806110a557506000828152600c602052604081206001015460ff1660038111156110a3576110a3611e39565b145b6110f15760405162461bcd60e51b815260206004820152601a60248201527f5661756c74206973206e6f74206f70656e206f7220656d70747900000000000060448201526064016106ef565b60035463ffffffff84811691161461115f5760405162461bcd60e51b815260206004820152602b60248201527f436861696e496420646f6573206e6f74206d617463682074686520636f6e747260448201526a1858dd0818da185a5b925960aa1b60648201526084016106ef565b6000828152600c602052604081206001015460ff16600381111561118557611185611e39565b0361132e5760005b60015481101561130e57600c60008481526020019081526020016000206000016040518060a00160405280600184815481106111cb576111cb6121e9565b600091825260208083206003909202909101546001600160a01b031683528201526001805460409092019185908110611206576112066121e9565b600091825260208083206002600390930201919091015463ffffffff1683528201526001805460409092019185908110611242576112426121e9565b60009182526020808320600392830201600290810154600160c01b9081900467ffffffffffffffff908116909652875460018082018a559886529483902087519590940290930180546001600160a01b0319166001600160a01b039586161781559186015196820196909655604085015195018054606086015160809096015163ffffffff9097166001600160c01b031990911617600160201b9590931694909402919091176001600160c01b031693909116029190911790558061130681612215565b91505061118d565b506000828152600c602052604090206001908101805460ff191690911790555b60005b81518110156118e7578363ffffffff16828281518110611353576113536121e9565b60200260200101516040015163ffffffff16146113d85760405162461bcd60e51b815260206004820152603860248201527f546f6b656e20636861696e496420646f6573206e6f74206d617463682074686560448201527f20636861696e4964206f662074686520636f6e7472616374000000000000000060648201526084016106ef565b600260008383815181106113ee576113ee6121e9565b6020026020010151600001516001600160a01b03166001600160a01b0316815260200190815260200160002060010154600c60008581526020019081526020016000206000018281548110611445576114456121e9565b906000526020600020906003020160010154838381518110611469576114696121e9565b60200260200101516020015161147f91906122cc565b11156114e05760405162461bcd60e51b815260206004820152602a60248201527f546f6b656e207175616e746974792065786365656473207468652072657175696044820152691c995908185b5bdd5b9d60b21b60648201526084016106ef565b60006115048383815181106114f7576114f76121e9565b6020026020010151610571565b90508463ffffffff1683838151811061151f5761151f6121e9565b60200260200101516040015163ffffffff160361161b57828281518110611548576115486121e9565b6020026020010151600001516001600160a01b03166323b872dd848481518110611574576115746121e9565b60200260200101516060015130868681518110611593576115936121e9565b60209081029190910181015101516040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af11580156115f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611619919061222e565b505b82828151811061162d5761162d6121e9565b602002602001015160200151600c60008681526020019081526020016000206000018281548110611660576116606121e9565b9060005260206000209060030201600101600082825461168091906122cc565b925050819055507f80590f9d7015c327349ea64242fc29353801fcad956721a0e45f725338db06f4848484815181106116bb576116bb6121e9565b6020026020010151600001518585815181106116d9576116d96121e9565b6020026020010151602001518686815181106116f7576116f76121e9565b602002602001015160400151878781518110611715576117156121e9565b60200260200101516060015160405161175f9594939291909485526001600160a01b039384166020860152604085019290925263ffffffff16606084015216608082015260a00190565b60405180910390a160035463ffffffff600160201b820481169116036118d457600b600085815260200190815260200160002060008484815181106117a6576117a66121e9565b6020026020010151606001516001600160a01b03166001600160a01b031681526020019081526020016000205460000361183c576000848152600a6020526040902083518490849081106117fc576117fc6121e9565b6020908102919091018101516060015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b039092169190911790555b60006001905080848481518110611855576118556121e9565b60200260200101516020015161186b91906122df565b600b60008781526020019081526020016000206000868681518110611892576118926121e9565b6020026020010151606001516001600160a01b03166001600160a01b0316815260200190815260200160002060008282546118cd91906122cc565b9091555050505b50806118df81612215565b915050611331565b5060005b6001548110156119725760018181548110611908576119086121e9565b906000526020600020906003020160010154600c60008581526020019081526020016000206000018281548110611941576119416121e9565b9060005260206000209060030201600101541015611960575050505050565b8061196a81612215565b9150506118eb565b506000828152600c60205260409020600101805460ff1916600217905560035463ffffffff808216600160201b90920416036119b6576119b1826119bf565b610a8a565b610a8a84611b90565b6000805b6000838152600a6020526040902054811015611a49576000838152600b60209081526040808320600a9092528220805491929184908110611a0657611a066121e9565b60009182526020808320909101546001600160a01b03168352820192909252604001902054611a3590836122cc565b915080611a4181612215565b9150506119c3565b5060005b6000838152600a6020526040902054811015611b8b576009546000848152600b60209081526040808320600a9092528220805492938693909291859187908110611a9957611a996121e9565b60009182526020808320909101546001600160a01b03168352820192909252604001902054611ac891906122df565b611ad291906122f6565b6008546000868152600a6020526040902080549293506001600160a01b03909116916340c10f19919085908110611b0b57611b0b6121e9565b60009182526020909120015460405160e083901b6001600160e01b03191681526001600160a01b03909116600482015260248101849052604401600060405180830381600087803b158015611b5f57600080fd5b505af1158015611b73573d6000803e3d6000fd5b50505050508080611b8390612215565b915050611a4d565b505050565b6005546006546003546040516001600160a01b03938416936000931691639c42bd1891600160201b90910463ffffffff16908590611bd2908890602001612318565b6040516020818303038152906040526040518463ffffffff1660e01b8152600401611bff93929190612250565b602060405180830381865afa158015611c1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c4091906122b3565b6006546003546040519293506001600160a01b039091169163fa31de01918491600160201b90910463ffffffff16908690610a1a908990602001612318565b80356001600160a01b0381168114611c9657600080fd5b919050565b60008060408385031215611cae57600080fd5b82359150611cbe60208401611c7f565b90509250929050565b60008060408385031215611cda57600080fd5b82359150602083013560048110611cf057600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715611d3457611d34611cfb565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611d6357611d63611cfb565b604052919050565b803563ffffffff81168114611c9657600080fd5b600060a08284031215611d9157600080fd5b60405160a0810167ffffffffffffffff8282108183111715611db557611db5611cfb565b81604052829350611dc585611c7f565b835260208501356020840152611ddd60408601611d6b565b6040840152611dee60608601611c7f565b6060840152608085013591508082168214611e0857600080fd5b506080919091015292915050565b600060a08284031215611e2857600080fd5b611e328383611d7f565b9392505050565b634e487b7160e01b600052602160045260246000fd5b60048110611e6d57634e487b7160e01b600052602160045260246000fd5b9052565b6020808252825182820181905260009190848201906040850190845b81811015611eb057611ea0838551611e4f565b9284019291840191600101611e8d565b50909695505050505050565b600060208284031215611ece57600080fd5b5035919050565b600080600080600060a08688031215611eed57600080fd5b611ef686611c7f565b9450611f0460208701611d6b565b9350611f1260408701611c7f565b9250611f2060608701611c7f565b9150611f2e60808701611c7f565b90509295509295909350565b60008060008060608587031215611f5057600080fd5b611f5985611d6b565b935060208501359250604085013567ffffffffffffffff80821115611f7d57600080fd5b818701915087601f830112611f9157600080fd5b813581811115611fa057600080fd5b886020828501011115611fb257600080fd5b95989497505060200194505050565b600060208284031215611fd357600080fd5b611e3282611c7f565b60208101611fea8284611e4f565b92915050565b600081518084526020808501945080840160005b8381101561206857815180516001600160a01b03908116895284820151858a015260408083015163ffffffff16908a01526060808301519091169089015260809081015167ffffffffffffffff169088015260a09096019590820190600101612004565b509495945050505050565b60208152600082516040602084015261208f6060840182611ff0565b905060208401516120a36040850182611e4f565b509392505050565b600060208083850312156120be57600080fd5b823567ffffffffffffffff808211156120d657600080fd5b90840190604082870312156120ea57600080fd5b6120f2611d11565b82358152838301358281111561210757600080fd5b80840193505086601f84011261211c57600080fd5b82358281111561212e5761212e611cfb565b61213c858260051b01611d3a565b818152858101935060a091820285018601918983111561215b57600080fd5b948601945b82861015612181576121728a87611d7f565b85529485019493860193612160565b50948201949094529695505050505050565b6000806000606084860312156121a857600080fd5b6121b184611c7f565b92506121bf60208501611c7f565b91506121cd60408501611c7f565b90509250925092565b602081526000611e326020830184611ff0565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201612227576122276121ff565b5060010190565b60006020828403121561224057600080fd5b81518015158114611e3257600080fd5b63ffffffff8416815260006020848184015260606040840152835180606085015260005b8181101561229057858101830151858201608001528201612274565b506000608082860101526080601f19601f83011685010192505050949350505050565b6000602082840312156122c557600080fd5b5051919050565b80820180821115611fea57611fea6121ff565b8082028115828204841417611fea57611fea6121ff565b60008261231357634e487b7160e01b600052601260045260246000fd5b500490565b60208152815160208201526000602083015160408084015261233d6060840182611ff0565b94935050505056fea26469706673582212200491d1ac448b9e29bbc129b40c10745f5421eeace0118237050eeee87f91497e64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1306,
        "contract": "contracts/ETFLock.sol:ETFLock",
        "label": "sideChainLock",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1308,
        "contract": "contracts/ETFLock.sol:ETFLock",
        "label": "sideChainId",
        "offset": 20,
        "slot": "0",
        "type": "t_uint32"
      },
      {
        "astId": 1312,
        "contract": "contracts/ETFLock.sol:ETFLock",
        "label": "requiredTokens",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_struct(TokenQuantity)1275_storage)dyn_storage"
      },
      {
        "astId": 1317,
        "contract": "contracts/ETFLock.sol:ETFLock",
        "label": "addressToToken",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(TokenQuantity)1275_storage)"
      },
      {
        "astId": 1319,
        "contract": "contracts/ETFLock.sol:ETFLock",
        "label": "chainId",
        "offset": 0,
        "slot": "3",
        "type": "t_uint32"
      },
      {
        "astId": 1321,
        "contract": "contracts/ETFLock.sol:ETFLock",
        "label": "mainChainId",
        "offset": 4,
        "slot": "3",
        "type": "t_uint32"
      },
      {
        "astId": 1323,
        "contract": "contracts/ETFLock.sol:ETFLock",
        "label": "quasarAddress",
        "offset": 8,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1326,
        "contract": "contracts/ETFLock.sol:ETFLock",
        "label": "receivedMessages",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint32)dyn_storage"
      },
      {
        "astId": 1328,
        "contract": "contracts/ETFLock.sol:ETFLock",
        "label": "mainChainLock",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 1331,
        "contract": "contracts/ETFLock.sol:ETFLock",
        "label": "outbox",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IMailbox)247"
      },
      {
        "astId": 1334,
        "contract": "contracts/ETFLock.sol:ETFLock",
        "label": "securityModule",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IInterchainSecurityModule)73"
      },
      {
        "astId": 1336,
        "contract": "contracts/ETFLock.sol:ETFLock",
        "label": "etfToken",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 1338,
        "contract": "contracts/ETFLock.sol:ETFLock",
        "label": "etfTokenPerVault",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1343,
        "contract": "contracts/ETFLock.sol:ETFLock",
        "label": "contributorsByVault",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 1349,
        "contract": "contracts/ETFLock.sol:ETFLock",
        "label": "accountContributionsPerVault",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1366,
        "contract": "contracts/ETFLock.sol:ETFLock",
        "label": "vaults",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_struct(Vault)1283_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(TokenQuantity)1275_storage)dyn_storage": {
        "base": "t_struct(TokenQuantity)1275_storage",
        "encoding": "dynamic_array",
        "label": "struct TokenQuantity[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint32)dyn_storage": {
        "base": "t_uint32",
        "encoding": "dynamic_array",
        "label": "uint32[]",
        "numberOfBytes": "32"
      },
      "t_contract(IInterchainSecurityModule)73": {
        "encoding": "inplace",
        "label": "contract IInterchainSecurityModule",
        "numberOfBytes": "20"
      },
      "t_contract(IMailbox)247": {
        "encoding": "inplace",
        "label": "contract IMailbox",
        "numberOfBytes": "20"
      },
      "t_enum(VaultState)1288": {
        "encoding": "inplace",
        "label": "enum VaultState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(TokenQuantity)1275_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TokenQuantity)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenQuantity)1275_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Vault)1283_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Vault)",
        "numberOfBytes": "32",
        "value": "t_struct(Vault)1283_storage"
      },
      "t_struct(TokenQuantity)1275_storage": {
        "encoding": "inplace",
        "label": "struct TokenQuantity",
        "members": [
          {
            "astId": 1266,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "_address",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1268,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "_quantity",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1270,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "_chainId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 1272,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "_contributor",
            "offset": 4,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1274,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "_tokenId",
            "offset": 24,
            "slot": "2",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Vault)1283_storage": {
        "encoding": "inplace",
        "label": "struct Vault",
        "members": [
          {
            "astId": 1279,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "_tokens",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(TokenQuantity)1275_storage)dyn_storage"
          },
          {
            "astId": 1282,
            "contract": "contracts/ETFLock.sol:ETFLock",
            "label": "state",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(VaultState)1288"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}